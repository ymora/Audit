#!/usr/bin/env python3
"""
ORGANISATION DU PROJET - SYST√àME D'AUDIT UNIVERSEL
=================================================

Script pour organiser le projet et s'assurer que les rapports sont aussi d√©taill√©s 
que celui du projet docusense (10,477 fichiers analys√©s, 38 vuln√©rabilit√©s, etc.)
"""

import os
import shutil
import subprocess
import sys
import json
from pathlib import Path
from datetime import datetime

class ProjectOrganizer:
    def __init__(self, project_dir: Path):
        self.project_dir = project_dir
        self.backup_dir = project_dir / "backup_organization"
        
        # Structure optimis√©e pour des rapports d√©taill√©s
        self.structure = {
            'core': [
                'audit_gui.py',
                'Audit IA.py', 
                'audit.py',
                'init_audit.py'
            ],
            'scripts': [
                'cleanup_old_audit.py',
                'migrate_old_reports.py',
                'demo.py'
            ],
            'tools': [
                'code_analyzer.py',
                'security_checker.py', 
                'dead_code_detector.py',
                'incomplete_implementation_detector.py'
            ],
            'tests': [
                'debug_security_detection.py',
                'test_subprocess_detection.py',
                'test_audit_configuration_integrity.py',
                'test_security_checker_unit.py',
                'analyze_code_duplications_detailed.py',
                'debug_code_duplications_analysis.py',
                'fix_final_vulnerabilities.py'
            ],
            'remove': [
                'launch_gui.py',
                'init_git_project.py',
                '.gitignore_template'
            ]
        }
    
    def create_backup(self):
        """Cr√©e une sauvegarde avant l'organisation."""
        print("üíæ Cr√©ation de la sauvegarde...")
        
        if self.backup_dir.exists():
            shutil.rmtree(self.backup_dir)
        
        self.backup_dir.mkdir(exist_ok=True)
        
        # Copier tous les fichiers Python
        for file_path in self.project_dir.glob("*.py"):
            shutil.copy2(file_path, self.backup_dir / file_path.name)
        
        print(f"‚úÖ Sauvegarde cr√©√©e dans: {self.backup_dir}")
    
    def organize_files(self):
        """Organise les fichiers selon la structure d√©finie."""
        print("üóÇÔ∏è Organisation des fichiers...")
        
        # Cr√©er les r√©pertoires
        for category in ['core', 'scripts', 'tests']:
            category_dir = self.project_dir / category
            category_dir.mkdir(exist_ok=True)
            print(f"   üìÅ Cr√©√©: {category_dir}")
        
        # D√©placer les fichiers vers core/
        for file_name in self.structure['core']:
            source_path = self.project_dir / file_name
            dest_path = self.project_dir / 'core' / file_name
            
            if source_path.exists() and not dest_path.exists():
                shutil.move(str(source_path), str(dest_path))
                print(f"   üìÑ D√©plac√©: {file_name} ‚Üí core/")
        
        # D√©placer les fichiers vers scripts/
        for file_name in self.structure['scripts']:
            source_path = self.project_dir / file_name
            dest_path = self.project_dir / 'scripts' / file_name
            
            if source_path.exists() and not dest_path.exists():
                shutil.move(str(source_path), str(dest_path))
                print(f"   üìÑ D√©plac√©: {file_name} ‚Üí scripts/")
        
        # D√©placer les fichiers de test depuis tools/ vers tests/
        tools_dir = self.project_dir / "tools"
        tests_dir = self.project_dir / "tests"
        
        if tools_dir.exists():
            for file_name in self.structure['tests']:
                source_path = tools_dir / file_name
                dest_path = tests_dir / file_name
                
                if source_path.exists() and not dest_path.exists():
                    shutil.move(str(source_path), str(dest_path))
                    print(f"   üìÑ D√©plac√©: {file_name} ‚Üí tests/")
        
        # D√©placer les fichiers depuis scripts/ vers tests/
        scripts_dir = self.project_dir / "scripts"
        if scripts_dir.exists():
            script_test_files = [
                'analyze_code_duplications_detailed.py',
                'debug_code_duplications_analysis.py', 
                'fix_final_vulnerabilities.py'
            ]
            
            for file_name in script_test_files:
                source_path = scripts_dir / file_name
                dest_path = tests_dir / file_name
                
                if source_path.exists() and not dest_path.exists():
                    shutil.move(str(source_path), str(dest_path))
                    print(f"   üìÑ D√©plac√©: {file_name} ‚Üí tests/")
        
        # Supprimer les fichiers obsol√®tes
        for file_name in self.structure['remove']:
            file_path = self.project_dir / file_name
            if file_path.exists():
                file_path.unlink()
                print(f"   üóëÔ∏è Supprim√©: {file_name}")
    
    def create_launcher(self):
        """Cr√©e le script de lancement unifi√©."""
        print("üöÄ Cr√©ation du lanceur unifi√©...")
        
        launcher_content = '''#!/usr/bin/env python3
"""
LANCEUR UNIFI√â - SYST√àME D'AUDIT UNIVERSEL
==========================================

Script de lancement unifi√© pour le syst√®me d'audit universel.
"""

import sys
import subprocess
import os
from pathlib import Path

def check_dependencies():
    """V√©rifie que toutes les d√©pendances sont disponibles."""
    try:
        import tkinter
        import tkinter.ttk
        import tkinter.filedialog
        import tkinter.messagebox
        import tkinter.scrolledtext
        return True
    except ImportError as e:
        print(f"‚ùå D√©pendance manquante: {e}")
        print("üí° tkinter est g√©n√©ralement inclus avec Python.")
        return False

def main():
    """Fonction principale."""
    print("üîç Lancement du Syst√®me d'Audit Universel")
    print("=" * 50)
    
    # V√©rifier les d√©pendances
    if not check_dependencies():
        print("\\n‚ùå Impossible de lancer l'interface graphique.")
        print("üí° Essayez de r√©installer Python avec tkinter inclus.")
        return 1
    
    # Chemin vers le script GUI principal
    audit_dir = Path(__file__).parent
    gui_script = audit_dir / "core" / "audit_gui.py"
    
    if not gui_script.exists():
        print(f"‚ùå Script GUI introuvable: {gui_script}")
        return 1
    
    print(f"‚úÖ Script GUI trouv√©: {gui_script}")
    print("üöÄ Lancement de l'interface moderne...")
    print()
    
    try:
        # Lancer l'interface graphique
        subprocess.run([sys.executable, str(gui_script)], check=True)
        return 0
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors du lancement: {e}")
        return 1
    except KeyboardInterrupt:
        print("\\n‚èπÔ∏è Lancement interrompu par l'utilisateur.")
        return 0

if __name__ == "__main__":
    sys.exit(main())
'''
        
        launcher_file = self.project_dir / "start_audit.py"
        launcher_file.write_text(launcher_content, encoding='utf-8')
        print(f"   üìÑ Cr√©√©: start_audit.py")
    
    def clean_temp_files(self):
        """Nettoie les fichiers temporaires."""
        print("üßπ Nettoyage des fichiers temporaires...")
        
        patterns = ['__pycache__', '*.pyc', '*.pyo', '.pytest_cache', '*.log', '*.tmp']
        files_removed = 0
        
        for pattern in patterns:
            if pattern.startswith('*'):
                for file_path in self.project_dir.rglob(pattern):
                    if file_path.is_file():
                        try:
                            file_path.unlink()
                            files_removed += 1
                        except:
                            pass
            else:
                for dir_path in self.project_dir.rglob(pattern):
                    if dir_path.is_dir():
                        try:
                            shutil.rmtree(dir_path)
                            files_removed += 1
                        except:
                            pass
        
        print(f"   üìä {files_removed} fichiers/r√©pertoires nettoy√©s")
    
    def create_init_files(self):
        """Cr√©e les fichiers __init__.py."""
        print("üìù Cr√©ation des fichiers __init__.py...")
        
        packages = ['core', 'scripts', 'tools', 'tests']
        for package in packages:
            package_dir = self.project_dir / package
            if package_dir.exists():
                init_file = package_dir / "__init__.py"
                if not init_file.exists():
                    init_file.touch()
                    print(f"   ‚úÖ Cr√©√©: {package}/__init__.py")
    
    def update_gitignore(self):
        """Met √† jour le .gitignore."""
        print("üìù Mise √† jour du .gitignore...")
        
        gitignore_content = '''# Fichiers syst√®me
.DS_Store
Thumbs.db
desktop.ini

# Fichiers Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# Environnements virtuels
venv/
env/
ENV/
env.bak/
venv.bak/

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# Logs
*.log
logs/
*.tmp
*.temp

# Configuration locale
gui_config.json
local_config.json

# Fichiers de sauvegarde
*.backup
*.bak
*.old
backup_organization/

# Tests
.pytest_cache/
.coverage
htmlcov/

# Fichiers temporaires
temp/
tmp/
*.cache

# Rapports temporaires
reports/temp/
*.tmp.html
*.tmp.json

# Dossiers d'audit des projets
.audit/
'''
        
        gitignore_file = self.project_dir / ".gitignore"
        gitignore_file.write_text(gitignore_content, encoding='utf-8')
        print("   ‚úÖ .gitignore mis √† jour")

def main():
    """Fonction principale."""
    project_dir = Path(__file__).parent
    
    print("üîß ORGANISATION DU PROJET - SYST√àME D'AUDIT UNIVERSEL")
    print("=" * 60)
    print(f"üìÅ R√©pertoire: {project_dir}")
    print(f"‚è∞ Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # Demander confirmation
    response = input("Voulez-vous organiser le projet? (oui/non): ").lower().strip()
    if response not in ['oui', 'o', 'yes', 'y']:
        print("‚ùå Organisation annul√©e.")
        return
    
    # Ex√©cuter l'organisation
    organizer = ProjectOrganizer(project_dir)
    
    # 1. Cr√©er une sauvegarde
    organizer.create_backup()
    
    # 2. Organiser les fichiers
    organizer.organize_files()
    
    # 3. Cr√©er le lanceur
    organizer.create_launcher()
    
    # 4. Nettoyer les fichiers temporaires
    organizer.clean_temp_files()
    
    # 5. Cr√©er les fichiers __init__.py
    organizer.create_init_files()
    
    # 6. Mettre √† jour .gitignore
    organizer.update_gitignore()
    
    print("\n‚úÖ ORGANISATION TERMIN√âE")
    print("=" * 60)
    print(f"üì¶ Sauvegarde: {organizer.backup_dir}")
    print("üöÄ Lanceur: start_audit.py")
    print("üí° Le projet est maintenant organis√© et pr√™t pour les tests!")

if __name__ == "__main__":
    main()
