{
  "audit_info": {
    "project_name": "",
    "project_type": "python",
    "timestamp": "2025-08-19T18:54:15.311149",
    "audit_version": "2.0.0",
    "audit_directory": "C:\\Users\\ymora\\Desktop\\audit\\projects"
  },
  "project_tests": {
    "project_name": "",
    "project_type": "python",
    "tests_executed": [
      {
        "name": "test_redirect_audit",
        "success": true,
        "message": "✅ Redirection réussie - Audit exhaustif terminé: 10/10 points (code mort, duplications, sécurité, implémentations incomplètes)",
        "details": {
          "dead_code": {
            "dead_functions": 0,
            "dead_classes": 0,
            "total_functions": 0,
            "total_classes": 0,
            "dead_functions_list": [],
            "dead_classes_list": []
          },
          "duplications": {
            "total_duplications": 11,
            "files_analyzed": 12,
            "duplications_list": [
              {
                "function_name": "center_window",
                "occurrences": [
                  {
                    "file": "C:\\Users\\ymora\\Desktop\\audit\\core\\audit_gui.py",
                    "function": {
                      "name": "center_window",
                      "lineno": 51,
                      "end_lineno": 56,
                      "args": [
                        "self"
                      ],
                      "decorators": [],
                      "lines": 6,
                      "complexity": 1,
                      "nesting_depth": 0,
                      "code": "    def center_window(self):\n        \"\"\"Centre la fenêtre sur l'écran.\"\"\"\n        self.dialog.update_idletasks()\n        x = (self.dialog.winfo_screenwidth() // 2) - (self.dialog.winfo_width() // 2)\n        y = (self.dialog.winfo_screenheight() // 2) - (self.dialog.winfo_height() // 2)\n        self.dialog.geometry(f\"+{x}+{y}\")",
                      "is_legitimate": false,
                      "quality_issues": []
                    },
                    "is_legitimate": false
                  },
                  {
                    "file": "C:\\Users\\ymora\\Desktop\\audit\\core\\audit_gui_clean.py",
                    "function": {
                      "name": "center_window",
                      "lineno": 53,
                      "end_lineno": 58,
                      "args": [
                        "self"
                      ],
                      "decorators": [],
                      "lines": 6,
                      "complexity": 1,
                      "nesting_depth": 0,
                      "code": "    def center_window(self):\n        \"\"\"Centre la fenêtre sur l'écran.\"\"\"\n        self.dialog.update_idletasks()\n        x = (self.dialog.winfo_screenwidth() // 2) - (self.dialog.winfo_width() // 2)\n        y = (self.dialog.winfo_screenheight() // 2) - (self.dialog.winfo_height() // 2)\n        self.dialog.geometry(f\"+{x}+{y}\")",
                      "is_legitimate": false,
                      "quality_issues": []
                    },
                    "is_legitimate": false
                  }
                ],
                "count": 2,
                "severity": "medium",
                "type": "to_fix",
                "recommendation": "Considérer la création d'une fonction utilitaire pour 'center_window'"
              },
              {
                "function_name": "browse_project",
                "occurrences": [
                  {
                    "file": "C:\\Users\\ymora\\Desktop\\audit\\core\\audit_gui.py",
                    "function": {
                      "name": "browse_project",
                      "lineno": 631,
                      "end_lineno": 641,
                      "args": [
                        "self"
                      ],
                      "decorators": [],
                      "lines": 11,
                      "complexity": 2,
                      "nesting_depth": 1,
                      "code": "    def browse_project(self):\n        \"\"\"Ouvre le dialogue de sélection de dossier.\"\"\"\n        project_path = filedialog.askdirectory(\n            title=\"Sélectionner le dossier du projet\",\n            initialdir=os.path.expanduser(\"~\")\n        )\n        \n        if project_path:\n            self.selected_project.set(project_path)\n            self.update_project_info()\n            self.add_recent_project(project_path)",
                      "is_legitimate": false,
                      "quality_issues": []
                    },
                    "is_legitimate": false
                  },
                  {
                    "file": "C:\\Users\\ymora\\Desktop\\audit\\core\\audit_gui_clean.py",
                    "function": {
                      "name": "browse_project",
                      "lineno": 651,
                      "end_lineno": 661,
                      "args": [
                        "self"
                      ],
                      "decorators": [],
                      "lines": 11,
                      "complexity": 2,
                      "nesting_depth": 1,
                      "code": "    def browse_project(self):\n        \"\"\"Ouvre le dialogue de sélection de dossier.\"\"\"\n        project_path = filedialog.askdirectory(\n            title=\"Sélectionner le dossier du projet\",\n            initialdir=os.path.expanduser(\"~\")\n        )\n        \n        if project_path:\n            self.selected_project.set(project_path)\n            self.update_project_info()\n            self.add_recent_project(project_path)",
                      "is_legitimate": false,
                      "quality_issues": []
                    },
                    "is_legitimate": false
                  }
                ],
                "count": 2,
                "severity": "medium",
                "type": "to_fix",
                "recommendation": "Considérer la création d'une fonction utilitaire pour 'browse_project'"
              },
              {
                "function_name": "log_message",
                "occurrences": [
                  {
                    "file": "C:\\Users\\ymora\\Desktop\\audit\\core\\audit_gui.py",
                    "function": {
                      "name": "log_message",
                      "lineno": 915,
                      "end_lineno": 921,
                      "args": [
                        "self",
                        "message"
                      ],
                      "decorators": [],
                      "lines": 7,
                      "complexity": 1,
                      "nesting_depth": 0,
                      "code": "    def log_message(self, message):\n        \"\"\"Ajoute un message aux logs.\"\"\"\n        timestamp = datetime.now().strftime(\"%H:%M:%S\")\n        log_entry = f\"[{timestamp}] {message}\\n\"\n        \n        self.root.after(0, lambda: self.logs_text.insert(tk.END, log_entry))\n        self.root.after(0, lambda: self.logs_text.see(tk.END))",
                      "is_legitimate": false,
                      "quality_issues": []
                    },
                    "is_legitimate": false
                  },
                  {
                    "file": "C:\\Users\\ymora\\Desktop\\audit\\core\\audit_gui_clean.py",
                    "function": {
                      "name": "log_message",
                      "lineno": 835,
                      "end_lineno": 841,
                      "args": [
                        "self",
                        "message"
                      ],
                      "decorators": [],
                      "lines": 7,
                      "complexity": 1,
                      "nesting_depth": 0,
                      "code": "    def log_message(self, message):\n        \"\"\"Ajoute un message aux logs.\"\"\"\n        timestamp = datetime.now().strftime(\"%H:%M:%S\")\n        log_entry = f\"[{timestamp}] {message}\\n\"\n        \n        self.root.after(0, lambda: self.logs_text.insert(tk.END, log_entry))\n        self.root.after(0, lambda: self.logs_text.see(tk.END))",
                      "is_legitimate": false,
                      "quality_issues": []
                    },
                    "is_legitimate": false
                  }
                ],
                "count": 2,
                "severity": "medium",
                "type": "to_fix",
                "recommendation": "Considérer la création d'une fonction utilitaire pour 'log_message'"
              },
              {
                "function_name": "clear_logs",
                "occurrences": [
                  {
                    "file": "C:\\Users\\ymora\\Desktop\\audit\\core\\audit_gui.py",
                    "function": {
                      "name": "clear_logs",
                      "lineno": 923,
                      "end_lineno": 925,
                      "args": [
                        "self"
                      ],
                      "decorators": [],
                      "lines": 3,
                      "complexity": 1,
                      "nesting_depth": 0,
                      "code": "    def clear_logs(self):\n        \"\"\"Efface les logs.\"\"\"\n        self.logs_text.delete(1.0, tk.END)",
                      "is_legitimate": false,
                      "quality_issues": []
                    },
                    "is_legitimate": false
                  },
                  {
                    "file": "C:\\Users\\ymora\\Desktop\\audit\\core\\audit_gui_clean.py",
                    "function": {
                      "name": "clear_logs",
                      "lineno": 843,
                      "end_lineno": 845,
                      "args": [
                        "self"
                      ],
                      "decorators": [],
                      "lines": 3,
                      "complexity": 1,
                      "nesting_depth": 0,
                      "code": "    def clear_logs(self):\n        \"\"\"Efface les logs.\"\"\"\n        self.logs_text.delete(1.0, tk.END)",
                      "is_legitimate": false,
                      "quality_issues": []
                    },
                    "is_legitimate": false
                  }
                ],
                "count": 2,
                "severity": "medium",
                "type": "to_fix",
                "recommendation": "Considérer la création d'une fonction utilitaire pour 'clear_logs'"
              },
              {
                "function_name": "copy_logs",
                "occurrences": [
                  {
                    "file": "C:\\Users\\ymora\\Desktop\\audit\\core\\audit_gui.py",
                    "function": {
                      "name": "copy_logs",
                      "lineno": 927,
                      "end_lineno": 938,
                      "args": [
                        "self"
                      ],
                      "decorators": [],
                      "lines": 12,
                      "complexity": 3,
                      "nesting_depth": 1,
                      "code": "    def copy_logs(self):\n        \"\"\"Copie les logs dans le presse-papiers.\"\"\"\n        try:\n            logs_content = self.logs_text.get(1.0, tk.END)\n            if logs_content.strip():\n                self.root.clipboard_clear()\n                self.root.clipboard_append(logs_content)\n                ModernDialog(self.root, \"Succès\", \"Logs copiés dans le presse-papiers!\", \"success\")\n            else:\n                ModernDialog(self.root, \"Attention\", \"Aucun log à copier.\", \"warning\")\n        except Exception as e:\n            ModernDialog(self.root, \"Erreur\", f\"Erreur lors de la copie: {e}\", \"error\")",
                      "is_legitimate": false,
                      "quality_issues": []
                    },
                    "is_legitimate": false
                  },
                  {
                    "file": "C:\\Users\\ymora\\Desktop\\audit\\core\\audit_gui_clean.py",
                    "function": {
                      "name": "copy_logs",
                      "lineno": 847,
                      "end_lineno": 858,
                      "args": [
                        "self"
                      ],
                      "decorators": [],
                      "lines": 12,
                      "complexity": 3,
                      "nesting_depth": 1,
                      "code": "    def copy_logs(self):\n        \"\"\"Copie les logs dans le presse-papiers.\"\"\"\n        try:\n            logs_content = self.logs_text.get(1.0, tk.END)\n            if logs_content.strip():\n                self.root.clipboard_clear()\n                self.root.clipboard_append(logs_content)\n                ModernDialog(self.root, \"Succès\", \"Logs copiés dans le presse-papiers!\", \"success\")\n            else:\n                ModernDialog(self.root, \"Attention\", \"Aucun log à copier.\", \"warning\")\n        except Exception as e:\n            ModernDialog(self.root, \"Erreur\", f\"Erreur lors de la copie: {e}\", \"error\")",
                      "is_legitimate": false,
                      "quality_issues": []
                    },
                    "is_legitimate": false
                  }
                ],
                "count": 2,
                "severity": "medium",
                "type": "to_fix",
                "recommendation": "Considérer la création d'une fonction utilitaire pour 'copy_logs'"
              },
              {
                "function_name": "add_recent_project",
                "occurrences": [
                  {
                    "file": "C:\\Users\\ymora\\Desktop\\audit\\core\\audit_gui.py",
                    "function": {
                      "name": "add_recent_project",
                      "lineno": 974,
                      "end_lineno": 990,
                      "args": [
                        "self",
                        "project_path"
                      ],
                      "decorators": [],
                      "lines": 17,
                      "complexity": 4,
                      "nesting_depth": 3,
                      "code": "    def add_recent_project(self, project_path):\n        \"\"\"Ajoute un projet à la liste des projets récents.\"\"\"\n        # Supprimer s'il existe déjà\n        for i in range(self.recent_listbox.size()):\n            if self.recent_listbox.get(i) == project_path:\n                self.recent_listbox.delete(i)\n                break\n        \n        # Ajouter au début\n        self.recent_listbox.insert(0, project_path)\n        \n        # Limiter à 10 projets\n        while self.recent_listbox.size() > 10:\n            self.recent_listbox.delete(tk.END)\n        \n        # Sauvegarder\n        self.save_recent_projects()",
                      "is_legitimate": false,
                      "quality_issues": []
                    },
                    "is_legitimate": false
                  },
                  {
                    "file": "C:\\Users\\ymora\\Desktop\\audit\\core\\audit_gui_clean.py",
                    "function": {
                      "name": "add_recent_project",
                      "lineno": 910,
                      "end_lineno": 926,
                      "args": [
                        "self",
                        "project_path"
                      ],
                      "decorators": [],
                      "lines": 17,
                      "complexity": 4,
                      "nesting_depth": 3,
                      "code": "    def add_recent_project(self, project_path):\n        \"\"\"Ajoute un projet à la liste des projets récents.\"\"\"\n        # Supprimer s'il existe déjà\n        for i in range(self.recent_listbox.size()):\n            if self.recent_listbox.get(i) == project_path:\n                self.recent_listbox.delete(i)\n                break\n        \n        # Ajouter au début\n        self.recent_listbox.insert(0, project_path)\n        \n        # Limiter à 10 projets\n        while self.recent_listbox.size() > 10:\n            self.recent_listbox.delete(tk.END)\n        \n        # Sauvegarder\n        self.save_recent_projects()",
                      "is_legitimate": false,
                      "quality_issues": []
                    },
                    "is_legitimate": false
                  }
                ],
                "count": 2,
                "severity": "medium",
                "type": "to_fix",
                "recommendation": "Considérer la création d'une fonction utilitaire pour 'add_recent_project'"
              },
              {
                "function_name": "select_recent_project",
                "occurrences": [
                  {
                    "file": "C:\\Users\\ymora\\Desktop\\audit\\core\\audit_gui.py",
                    "function": {
                      "name": "select_recent_project",
                      "lineno": 992,
                      "end_lineno": 999,
                      "args": [
                        "self",
                        "event"
                      ],
                      "decorators": [],
                      "lines": 8,
                      "complexity": 2,
                      "nesting_depth": 1,
                      "code": "    def select_recent_project(self, event=None):\n        \"\"\"Sélectionne un projet de la liste des projets récents.\"\"\"\n        selection = self.recent_listbox.curselection()\n        if selection:\n            project_path = self.recent_listbox.get(selection[0])\n            self.selected_project.set(project_path)\n            self.update_project_info()\n            self.add_recent_project(project_path)",
                      "is_legitimate": false,
                      "quality_issues": []
                    },
                    "is_legitimate": false
                  },
                  {
                    "file": "C:\\Users\\ymora\\Desktop\\audit\\core\\audit_gui_clean.py",
                    "function": {
                      "name": "select_recent_project",
                      "lineno": 928,
                      "end_lineno": 934,
                      "args": [
                        "self",
                        "event"
                      ],
                      "decorators": [],
                      "lines": 7,
                      "complexity": 2,
                      "nesting_depth": 1,
                      "code": "    def select_recent_project(self, event=None):\n        \"\"\"Sélectionne un projet de la liste des projets récents.\"\"\"\n        selection = self.recent_listbox.curselection()\n        if selection:\n            project_path = self.recent_listbox.get(selection[0])\n            self.selected_project.set(project_path)\n            self.update_project_info()",
                      "is_legitimate": false,
                      "quality_issues": []
                    },
                    "is_legitimate": false
                  }
                ],
                "count": 2,
                "severity": "medium",
                "type": "to_fix",
                "recommendation": "Considérer la création d'une fonction utilitaire pour 'select_recent_project'"
              },
              {
                "function_name": "remove_recent_project",
                "occurrences": [
                  {
                    "file": "C:\\Users\\ymora\\Desktop\\audit\\core\\audit_gui.py",
                    "function": {
                      "name": "remove_recent_project",
                      "lineno": 1001,
                      "end_lineno": 1006,
                      "args": [
                        "self"
                      ],
                      "decorators": [],
                      "lines": 6,
                      "complexity": 2,
                      "nesting_depth": 1,
                      "code": "    def remove_recent_project(self):\n        \"\"\"Supprime un projet de la liste des projets récents.\"\"\"\n        selection = self.recent_listbox.curselection()\n        if selection:\n            self.recent_listbox.delete(selection[0])\n            self.save_recent_projects()",
                      "is_legitimate": false,
                      "quality_issues": []
                    },
                    "is_legitimate": false
                  },
                  {
                    "file": "C:\\Users\\ymora\\Desktop\\audit\\core\\audit_gui_clean.py",
                    "function": {
                      "name": "remove_recent_project",
                      "lineno": 936,
                      "end_lineno": 941,
                      "args": [
                        "self"
                      ],
                      "decorators": [],
                      "lines": 6,
                      "complexity": 2,
                      "nesting_depth": 1,
                      "code": "    def remove_recent_project(self):\n        \"\"\"Supprime un projet de la liste des projets récents.\"\"\"\n        selection = self.recent_listbox.curselection()\n        if selection:\n            self.recent_listbox.delete(selection[0])\n            self.save_recent_projects()",
                      "is_legitimate": false,
                      "quality_issues": []
                    },
                    "is_legitimate": false
                  }
                ],
                "count": 2,
                "severity": "medium",
                "type": "to_fix",
                "recommendation": "Considérer la création d'une fonction utilitaire pour 'remove_recent_project'"
              },
              {
                "function_name": "on_closing",
                "occurrences": [
                  {
                    "file": "C:\\Users\\ymora\\Desktop\\audit\\core\\audit_gui.py",
                    "function": {
                      "name": "on_closing",
                      "lineno": 1014,
                      "end_lineno": 1016,
                      "args": [],
                      "decorators": [],
                      "lines": 3,
                      "complexity": 1,
                      "nesting_depth": 0,
                      "code": "    def on_closing():\n        app.save_recent_projects()\n        root.destroy()",
                      "is_legitimate": false,
                      "quality_issues": []
                    },
                    "is_legitimate": false
                  },
                  {
                    "file": "C:\\Users\\ymora\\Desktop\\audit\\core\\audit_gui_clean.py",
                    "function": {
                      "name": "on_closing",
                      "lineno": 956,
                      "end_lineno": 958,
                      "args": [],
                      "decorators": [],
                      "lines": 3,
                      "complexity": 1,
                      "nesting_depth": 0,
                      "code": "    def on_closing():\n        app.save_recent_projects()\n        root.destroy()",
                      "is_legitimate": false,
                      "quality_issues": []
                    },
                    "is_legitimate": false
                  }
                ],
                "count": 2,
                "severity": "medium",
                "type": "to_fix",
                "recommendation": "Considérer la création d'une fonction utilitaire pour 'on_closing'"
              },
              {
                "function_name": "load_recent_projects",
                "occurrences": [
                  {
                    "file": "C:\\Users\\ymora\\Desktop\\audit\\core\\audit_gui.py",
                    "function": {
                      "name": "load_recent_projects",
                      "lineno": 940,
                      "end_lineno": 954,
                      "args": [
                        "self"
                      ],
                      "decorators": [],
                      "lines": 15,
                      "complexity": 6,
                      "nesting_depth": 4,
                      "code": "    def load_recent_projects(self):\n        \"\"\"Charge la liste des projets récents.\"\"\"\n        config_file = self.project_dir / \"gui_config.json\"\n        \n        if config_file.exists():\n            try:\n                with open(config_file, 'r', encoding='utf-8') as f:\n                    config = json.load(f)\n                    recent_projects = config.get('recent_projects', [])\n                    \n                    for project in recent_projects:\n                        if Path(project).exists():\n                            self.recent_listbox.insert(tk.END, project)\n            except Exception as e:\n                self.log_message(f\"⚠️ Erreur lors du chargement: {e}\")",
                      "is_legitimate": true,
                      "quality_issues": []
                    },
                    "is_legitimate": true
                  },
                  {
                    "file": "C:\\Users\\ymora\\Desktop\\audit\\core\\audit_gui_clean.py",
                    "function": {
                      "name": "load_recent_projects",
                      "lineno": 876,
                      "end_lineno": 890,
                      "args": [
                        "self"
                      ],
                      "decorators": [],
                      "lines": 15,
                      "complexity": 6,
                      "nesting_depth": 4,
                      "code": "    def load_recent_projects(self):\n        \"\"\"Charge la liste des projets récents.\"\"\"\n        config_file = self.project_dir / \"gui_config.json\"\n        \n        if config_file.exists():\n            try:\n                with open(config_file, 'r', encoding='utf-8') as f:\n                    config = json.load(f)\n                    recent_projects = config.get('recent_projects', [])\n                    \n                    for project in recent_projects:\n                        if Path(project).exists():\n                            self.recent_listbox.insert(tk.END, project)\n            except Exception as e:\n                self.log_message(f\"⚠️ Erreur lors du chargement des projets récents: {e}\")",
                      "is_legitimate": true,
                      "quality_issues": []
                    },
                    "is_legitimate": true
                  }
                ],
                "count": 2,
                "severity": "low",
                "type": "legitimate",
                "reason": "Pattern de développement légitime"
              },
              {
                "function_name": "save_recent_projects",
                "occurrences": [
                  {
                    "file": "C:\\Users\\ymora\\Desktop\\audit\\core\\audit_gui.py",
                    "function": {
                      "name": "save_recent_projects",
                      "lineno": 956,
                      "end_lineno": 972,
                      "args": [
                        "self"
                      ],
                      "decorators": [],
                      "lines": 17,
                      "complexity": 3,
                      "nesting_depth": 1,
                      "code": "    def save_recent_projects(self):\n        \"\"\"Sauvegarde la liste des projets récents.\"\"\"\n        config_file = self.project_dir / \"gui_config.json\"\n        \n        try:\n            recent_projects = list(self.recent_listbox.get(0, tk.END))\n            \n            config = {\n                'recent_projects': recent_projects,\n                'last_updated': datetime.now().isoformat()\n            }\n            \n            with open(config_file, 'w', encoding='utf-8') as f:\n                json.dump(config, f, indent=2, ensure_ascii=False)\n                \n        except Exception as e:\n            self.log_message(f\"⚠️ Erreur lors de la sauvegarde: {e}\")",
                      "is_legitimate": true,
                      "quality_issues": []
                    },
                    "is_legitimate": true
                  },
                  {
                    "file": "C:\\Users\\ymora\\Desktop\\audit\\core\\audit_gui_clean.py",
                    "function": {
                      "name": "save_recent_projects",
                      "lineno": 892,
                      "end_lineno": 908,
                      "args": [
                        "self"
                      ],
                      "decorators": [],
                      "lines": 17,
                      "complexity": 3,
                      "nesting_depth": 1,
                      "code": "    def save_recent_projects(self):\n        \"\"\"Sauvegarde la liste des projets récents.\"\"\"\n        config_file = self.project_dir / \"gui_config.json\"\n        \n        try:\n            recent_projects = list(self.recent_listbox.get(0, tk.END))\n            \n            config = {\n                'recent_projects': recent_projects,\n                'last_updated': datetime.now().isoformat()\n            }\n            \n            with open(config_file, 'w', encoding='utf-8') as f:\n                json.dump(config, f, indent=2, ensure_ascii=False)\n                \n        except Exception as e:\n            self.log_message(f\"⚠️ Erreur lors de la sauvegarde des projets récents: {e}\")",
                      "is_legitimate": true,
                      "quality_issues": []
                    },
                    "is_legitimate": true
                  }
                ],
                "count": 2,
                "severity": "low",
                "type": "legitimate",
                "reason": "Pattern de développement légitime"
              }
            ],
            "duplications_summary": {
              "total_duplications": 11,
              "duplications_to_fix": 9,
              "legitimate_duplications": 2,
              "critical_duplications": 0,
              "medium_duplications": 9
            }
          },
          "security": {
            "summary": {
              "total_vulnerabilities": 0,
              "critical": 0,
              "high": 0,
              "medium": 0,
              "low": 0
            },
            "by_severity": {},
            "by_type": {},
            "vulnerabilities": [],
            "recommendations": [
              "Utiliser des variables d'environnement pour les secrets",
              "Implémenter une validation stricte des entrées utilisateur",
              "Utiliser des requêtes préparées pour les bases de données",
              "Mettre en place une gestion des erreurs sécurisée",
              "Implémenter des logs de sécurité",
              "Effectuer des tests de sécurité réguliers",
              "Utiliser HTTPS en production",
              "Implémenter une authentification forte",
              "Mettre en place des limites de taux (rate limiting)",
              "Utiliser des algorithmes de chiffrement modernes"
            ]
          },
          "incomplete_implementations": {
            "total_files": 0,
            "total_issues": 0,
            "issues_by_type": {},
            "issues_by_severity": {
              "CRITICAL": [],
              "HIGH": [],
              "MEDIUM": [],
              "LOW": []
            },
            "all_issues": []
          },
          "generic_audit": {
            "success": true,
            "message": "Audit générique terminé avec succès",
            "details": {
              "analysis_type": "generic",
              "timestamp": "2025-08-19T18:54:12.067990",
              "project_path": ".",
              "findings": [
                {
                  "type": "structure",
                  "severity": "info",
                  "message": "Dossiers recommandés manquants: src, lib, app, main, utils",
                  "recommendation": "Créer une structure de projet standardisée"
                },
                {
                  "type": "code_quality",
                  "severity": "warning",
                  "file": "core\\audit_gui_clean.py",
                  "line": 292,
                  "message": "Fonction 'setup_styles' très longue (26 lignes)"
                },
                {
                  "type": "code_quality",
                  "severity": "warning",
                  "file": "scripts\\migrate_old_reports.py",
                  "line": 15,
                  "message": "Fonction 'migrate_old_reports' très longue (26 lignes)"
                },
                {
                  "type": "code_quality",
                  "severity": "warning",
                  "file": "tools\\security_checker.py",
                  "line": 572,
                  "message": "Fonction 'main' très longue (23 lignes)"
                },
                {
                  "type": "code_quality",
                  "severity": "warning",
                  "file": "scripts\\debug\\analyze_code_duplications_detailed.py",
                  "line": 28,
                  "message": "Fonction 'analyze_duplications_detailed' très longue (38 lignes)"
                },
                {
                  "type": "code_quality",
                  "severity": "warning",
                  "file": "core\\project_audits\\audit\\test_code_quality.py",
                  "line": 148,
                  "message": "Fonction '_calculate_quality_score' très longue (23 lignes)"
                },
                {
                  "type": "security",
                  "severity": "high",
                  "file": "tests\\test_security_checker_unit.py",
                  "message": "Pattern de sécurité détecté: password",
                  "recommendation": "Vérifier et sécuriser les données sensibles"
                },
                {
                  "type": "security",
                  "severity": "high",
                  "file": "tests\\test_security_checker_unit.py",
                  "message": "Pattern de sécurité détecté: api_key",
                  "recommendation": "Vérifier et sécuriser les données sensibles"
                }
              ],
              "metrics": {
                "total_files": 496,
                "file_types": {
                  "": 319,
                  ".py": 37,
                  ".md": 12,
                  ".txt": 4,
                  ".json": 35,
                  ".pyc": 25,
                  ".log": 24,
                  ".html": 26,
                  ".sample": 14
                },
                "code_files": 37,
                "python": {
                  "total_files": 37,
                  "total_lines": 10179,
                  "total_functions": 303,
                  "total_classes": 24,
                  "avg_lines_per_file": 275.1081081081081
                }
              },
              "recommendations": [
                "Projet de grande taille - Considérer une architecture modulaire",
                "Fichiers très longs - Diviser en modules plus petits",
                "Problèmes de sécurité détectés - Audit de sécurité recommandé",
                "Problèmes de qualité détectés - Refactoring recommandé"
              ]
            }
          },
          "structure": {
            "total_files": 496,
            "python_files": 37,
            "test_files": 13,
            "doc_files": 16,
            "missing_essential": []
          },
          "quality_score": 10
        }
      }
    ],
    "tests_passed": 1,
    "tests_failed": 0,
    "total_tests": 1,
    "start_time": "2025-08-19T18:54:11.770855",
    "end_time": "2025-08-19T18:54:13.679199",
    "log_file": "C:\\Users\\ymora\\Desktop\\audit\\projects\\logs\\audit_20250819_185411.log"
  },
  "generic_audit": {
    "generic_audit": {
      "success": true,
      "message": "Audit générique terminé avec succès",
      "details": {
        "analysis_type": "generic",
        "timestamp": "2025-08-19T18:54:13.681032",
        "project_path": ".",
        "findings": [
          {
            "type": "structure",
            "severity": "info",
            "message": "Dossiers recommandés manquants: src, lib, app, main, utils",
            "recommendation": "Créer une structure de projet standardisée"
          },
          {
            "type": "code_quality",
            "severity": "warning",
            "file": "core\\audit_gui_clean.py",
            "line": 292,
            "message": "Fonction 'setup_styles' très longue (26 lignes)"
          },
          {
            "type": "code_quality",
            "severity": "warning",
            "file": "scripts\\migrate_old_reports.py",
            "line": 15,
            "message": "Fonction 'migrate_old_reports' très longue (26 lignes)"
          },
          {
            "type": "code_quality",
            "severity": "warning",
            "file": "tools\\security_checker.py",
            "line": 572,
            "message": "Fonction 'main' très longue (23 lignes)"
          },
          {
            "type": "code_quality",
            "severity": "warning",
            "file": "scripts\\debug\\analyze_code_duplications_detailed.py",
            "line": 28,
            "message": "Fonction 'analyze_duplications_detailed' très longue (38 lignes)"
          },
          {
            "type": "code_quality",
            "severity": "warning",
            "file": "core\\project_audits\\audit\\test_code_quality.py",
            "line": 148,
            "message": "Fonction '_calculate_quality_score' très longue (23 lignes)"
          },
          {
            "type": "security",
            "severity": "high",
            "file": "tests\\test_security_checker_unit.py",
            "message": "Pattern de sécurité détecté: password",
            "recommendation": "Vérifier et sécuriser les données sensibles"
          },
          {
            "type": "security",
            "severity": "high",
            "file": "tests\\test_security_checker_unit.py",
            "message": "Pattern de sécurité détecté: api_key",
            "recommendation": "Vérifier et sécuriser les données sensibles"
          }
        ],
        "metrics": {
          "total_files": 496,
          "file_types": {
            "": 319,
            ".py": 37,
            ".md": 12,
            ".txt": 4,
            ".json": 35,
            ".pyc": 25,
            ".log": 24,
            ".html": 26,
            ".sample": 14
          },
          "code_files": 37,
          "python": {
            "total_files": 37,
            "total_lines": 10179,
            "total_functions": 303,
            "total_classes": 24,
            "avg_lines_per_file": 275.1081081081081
          }
        },
        "recommendations": [
          "Projet de grande taille - Considérer une architecture modulaire",
          "Fichiers très longs - Diviser en modules plus petits",
          "Problèmes de sécurité détectés - Audit de sécurité recommandé",
          "Problèmes de qualité détectés - Refactoring recommandé"
        ]
      }
    }
  },
  "summary": {
    "total_tests": 1,
    "tests_passed": 1,
    "tests_failed": 0,
    "success_rate": 100.0
  }
}