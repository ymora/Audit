{
  "audit_info": {
    "timestamp": "2025-08-19 00:46:38",
    "project": "DocuSense AI",
    "audit_version": "2.0",
    "auditor": "Audit IA System"
  },
  "summary": {
    "files_analyzed": 10477,
    "issues_found": 0,
    "security_issues": 38,
    "duplications_found": 71,
    "dead_functions_count": 429,
    "dead_classes_count": 19,
    "incomplete_implementations": 103,
    "quality_score": 100
  },
  "detailed_results": {
    "code_analysis": {
      "files_analyzed": 10477,
      "issues_found": 0,
      "warnings": [],
      "errors": []
    },
    "security_check": {
      "security_issues": 38,
      "vulnerabilities": [
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\error_monitor.py",
          "type": "command_injection",
          "pattern": "ast",
          "line": 72,
          "line_content": "self.backend_process = subprocess.Popen(",
          "match": "",
          "severity": "CRITICAL",
          "description": "subprocess.Popen avec entrée dynamique"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\error_monitor.py",
          "type": "command_injection",
          "pattern": "ast",
          "line": 149,
          "line_content": "subprocess.run([",
          "match": "",
          "severity": "CRITICAL",
          "description": "subprocess.run avec entrée dynamique"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\error_monitor.py",
          "type": "command_injection",
          "pattern": "ast",
          "line": 155,
          "line_content": "subprocess.run([",
          "match": "",
          "severity": "CRITICAL",
          "description": "subprocess.run avec entrée dynamique"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\error_monitor.py",
          "type": "command_injection",
          "pattern": "ast",
          "line": 168,
          "line_content": "subprocess.run([",
          "match": "",
          "severity": "CRITICAL",
          "description": "subprocess.run avec entrée dynamique"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\api\\files.py",
          "type": "command_injection",
          "pattern": "ast",
          "line": 321,
          "line_content": "result = subprocess.run([\"wmic\",",
          "match": "",
          "severity": "CRITICAL",
          "description": "subprocess.run avec entrée dynamique"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\api\\files.py",
          "type": "command_injection",
          "pattern": "ast",
          "line": 1024,
          "line_content": "subprocess.run([\"explorer\", str(path)], check=True)",
          "match": "",
          "severity": "CRITICAL",
          "description": "subprocess.run avec entrée dynamique"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\api\\files.py",
          "type": "command_injection",
          "pattern": "ast",
          "line": 1026,
          "line_content": "subprocess.run([\"open\", str(path)], check=True)",
          "match": "",
          "severity": "CRITICAL",
          "description": "subprocess.run avec entrée dynamique"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\api\\files.py",
          "type": "command_injection",
          "pattern": "ast",
          "line": 1028,
          "line_content": "subprocess.run([\"xdg-open\", str(path)], check=True)",
          "match": "",
          "severity": "CRITICAL",
          "description": "subprocess.run avec entrée dynamique"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\document_extractor_service.py",
          "type": "command_injection",
          "pattern": "ast",
          "line": 125,
          "line_content": "result = subprocess.run(['antiword', str(file_path)],",
          "match": "",
          "severity": "CRITICAL",
          "description": "subprocess.run avec entrée dynamique"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\document_extractor_service.py",
          "type": "command_injection",
          "pattern": "ast",
          "line": 332,
          "line_content": "result = subprocess.run(['untext', str(file_path)],",
          "match": "",
          "severity": "CRITICAL",
          "description": "subprocess.run avec entrée dynamique"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\config_service.py",
          "type": "sensitive_data_exposure",
          "pattern": "(?:api_key|secret_key|password|token|private_key)\\s*=\\s*[^=]+[\"\\'][^\"\\']{1,}[\"\\']",
          "line": 718,
          "line_content": "api_key = self.get_ai_provider_key(provider)",
          "match": "api_key = self.get_ai_provider_key(provider)\n                if api_key and api_key.strip():\n                    configured_providers.append(provider)\n\n            return configured_providers\n        except Exception as e:\n            self.logger.error(f\"Error getting configured providers: {str(e)}\")\n            return []\n\n    def _get_active_providers(self) -> List[str]:\n        \"\"\"\n        Get list of active providers (only those explicitly configured AND validated by user)\n        \"\"\"\n        try:\n            active_providers = []\n            all_providers = [\"",
          "severity": "HIGH",
          "description": "Exposition de données sensibles - clés, mots de passe en dur"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\config_service.py",
          "type": "sensitive_data_exposure",
          "pattern": "(?:api_key|secret_key|password|token|private_key)\\s*=\\s*[^=]+[\"\\'][^\"\\']{1,}[\"\\']",
          "line": 1587,
          "line_content": "api_key = self.get_ai_provider_key(provider)",
          "match": "api_key = self.get_ai_provider_key(provider)\n                if not api_key:\n                    return {\n                        \"success\": False,\n                        \"message\": f\"Aucune clé API configurée pour {provider}\",\n                        \"cached\": False\n                    }\n            \n            # Tester le provider\n            from .ai_service import get_ai_service\n            ai_service = get_ai_service(self.db)\n            \n            is_functional = await ai_service.test_provider_with_key(provider, api_key)\n            \n            # Le statut est déjà sauvegardé par test_provider_with_key\n            message = f\"",
          "severity": "HIGH",
          "description": "Exposition de données sensibles - clés, mots de passe en dur"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\multimedia_service.py",
          "type": "command_injection",
          "pattern": "ast",
          "line": 478,
          "line_content": "result = subprocess.run(",
          "match": "",
          "severity": "CRITICAL",
          "description": "subprocess.run avec entrée dynamique"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\multimedia_service.py",
          "type": "command_injection",
          "pattern": "ast",
          "line": 570,
          "line_content": "result = subprocess.run(",
          "match": "",
          "severity": "CRITICAL",
          "description": "subprocess.run avec entrée dynamique"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\video_converter_service.py",
          "type": "command_injection",
          "pattern": "ast",
          "line": 138,
          "line_content": "process = subprocess.Popen(",
          "match": "",
          "severity": "CRITICAL",
          "description": "subprocess.Popen avec entrée dynamique"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\video_converter_service.py",
          "type": "command_injection",
          "pattern": "ast",
          "line": 200,
          "line_content": "subprocess.run(['taskkill', '/F', '/PID', str(process.pid)],",
          "match": "",
          "severity": "CRITICAL",
          "description": "subprocess.run avec entrée dynamique"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\video_converter_service.py",
          "type": "command_injection",
          "pattern": "ast",
          "line": 272,
          "line_content": "result = subprocess.run(cmd, capture_output=True, text=True)",
          "match": "",
          "severity": "CRITICAL",
          "description": "subprocess.run avec entrée dynamique"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\video_converter_service.py",
          "type": "command_injection",
          "pattern": "ast",
          "line": 389,
          "line_content": "process = subprocess.run(",
          "match": "",
          "severity": "CRITICAL",
          "description": "subprocess.run avec entrée dynamique"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\video_converter_service.py",
          "type": "command_injection",
          "pattern": "ast",
          "line": 412,
          "line_content": "subprocess.run(cmd, capture_output=True, text=True, timeout=5)",
          "match": "",
          "severity": "CRITICAL",
          "description": "subprocess.run avec entrée dynamique"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\streaming_service.py",
          "type": "command_injection",
          "pattern": "ast",
          "line": 51,
          "line_content": "result = subprocess.run([path, '-version'],",
          "match": "",
          "severity": "CRITICAL",
          "description": "subprocess.run avec entrée dynamique"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\reports\\latest\\security_report.json",
          "type": "sensitive_data_exposure",
          "pattern": "config",
          "line": 198,
          "line_content": "\"line_content\": \"token = generate_token()\",",
          "match": "token = generate_token()\",",
          "severity": "HIGH",
          "description": "Secret potentiellement exposé dans un fichier de configuration"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\reports\\latest\\security_report.json",
          "type": "sensitive_data_exposure",
          "pattern": "config",
          "line": 199,
          "line_content": "\"match\": \"token = generate_token()\\n        \\n        # Enregistrer la métrique de connexion\\n        APIUtils.record_api_metric(\\\"login_attempts\\\", 1.0, {\\\"username\\\": username})\\n        \\n        return ResponseFormatter.success_response(\\n            data={\\n                \\\"\",",
          "match": "token = generate_token()\\n        \\n        # Enregistrer la métrique de connexion\\n        APIUtils.record_api_metric(\\\"login_attempts\\\", 1.0, {\\\"username\\\": username})\\n        \\n        return ResponseFormatter.success_response(\\n            data={\\n                \\\"\",",
          "severity": "HIGH",
          "description": "Secret potentiellement exposé dans un fichier de configuration"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\reports\\latest\\security_report.json",
          "type": "sensitive_data_exposure",
          "pattern": "config",
          "line": 208,
          "line_content": "\"line_content\": \"api_key = self.get_ai_provider_key(provider)\",",
          "match": "api_key = self.get_ai_provider_key(provider)\",",
          "severity": "HIGH",
          "description": "Secret potentiellement exposé dans un fichier de configuration"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\reports\\latest\\security_report.json",
          "type": "sensitive_data_exposure",
          "pattern": "config",
          "line": 209,
          "line_content": "\"match\": \"api_key = self.get_ai_provider_key(provider)\\n                if api_key and api_key.strip():\\n                    configured_providers.append(provider)\\n\\n            return configured_providers\\n        except Exception as e:\\n            self.logger.error(f\\\"Error getting configured providers: {str(e)}\\\")\\n            return []\\n\\n    def _get_active_providers(self) -> List[str]:\\n        \\\"\\\"\\\"\\n        Get list of active providers (only those explicitly configured AND validated by user)\\n        \\\"\\\"\\\"\\n        try:\\n            active_providers = []\\n            all_providers = [\\\"\",",
          "match": "api_key = self.get_ai_provider_key(provider)\\n                if api_key and api_key.strip():\\n                    configured_providers.append(provider)\\n\\n            return configured_providers\\n        except Exception as e:\\n            self.logger.error(f\\\"Error getting configured providers: {str(e)}\\\")\\n            return []\\n\\n    def _get_active_providers(self) -> List[str]:\\n        \\\"\\\"\\\"\\n        Get list of active providers (only those explicitly configured AND validated by user)\\n        \\\"\\\"\\\"\\n        try:\\n            active_providers = []\\n            all_providers = [\\\"\",",
          "severity": "HIGH",
          "description": "Secret potentiellement exposé dans un fichier de configuration"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\reports\\latest\\security_report.json",
          "type": "sensitive_data_exposure",
          "pattern": "config",
          "line": 218,
          "line_content": "\"line_content\": \"api_key = self.get_ai_provider_key(provider)\",",
          "match": "api_key = self.get_ai_provider_key(provider)\",",
          "severity": "HIGH",
          "description": "Secret potentiellement exposé dans un fichier de configuration"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\reports\\latest\\security_report.json",
          "type": "sensitive_data_exposure",
          "pattern": "config",
          "line": 219,
          "line_content": "\"match\": \"api_key = self.get_ai_provider_key(provider)\\n                if not api_key:\\n                    return {\\n                        \\\"success\\\": False,\\n                        \\\"message\\\": f\\\"Aucune clé API configurée pour {provider}\\\",\\n                        \\\"cached\\\": False\\n                    }\\n            \\n            # Tester le provider\\n            from .ai_service import get_ai_service\\n            ai_service = get_ai_service(self.db)\\n            \\n            is_functional = await ai_service.test_provider_with_key(provider, api_key)\\n            \\n            # Le statut est déjà sauvegardé par test_provider_with_key\\n            message = f\\\"\",",
          "match": "api_key = self.get_ai_provider_key(provider)\\n                if not api_key:\\n                    return {\\n                        \\\"success\\\": False,\\n                        \\\"message\\\": f\\\"Aucune clé API configurée pour {provider}\\\",\\n                        \\\"cached\\\": False\\n                    }\\n            \\n            # Tester le provider\\n            from .ai_service import get_ai_service\\n            ai_service = get_ai_service(self.db)\\n            \\n            is_functional = await ai_service.test_provider_with_key(provider, api_key)\\n            \\n            # Le statut est déjà sauvegardé par test_provider_with_key\\n            message = f\\\"\",",
          "severity": "HIGH",
          "description": "Secret potentiellement exposé dans un fichier de configuration"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\reports\\latest\\security_report.json",
          "type": "sensitive_data_exposure",
          "pattern": "config",
          "line": 414,
          "line_content": "\"line_content\": \"token = generate_token()\",",
          "match": "token = generate_token()\",",
          "severity": "HIGH",
          "description": "Secret potentiellement exposé dans un fichier de configuration"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\reports\\latest\\security_report.json",
          "type": "sensitive_data_exposure",
          "pattern": "config",
          "line": 415,
          "line_content": "\"match\": \"token = generate_token()\\n        \\n        # Enregistrer la métrique de connexion\\n        APIUtils.record_api_metric(\\\"login_attempts\\\", 1.0, {\\\"username\\\": username})\\n        \\n        return ResponseFormatter.success_response(\\n            data={\\n                \\\"\",",
          "match": "token = generate_token()\\n        \\n        # Enregistrer la métrique de connexion\\n        APIUtils.record_api_metric(\\\"login_attempts\\\", 1.0, {\\\"username\\\": username})\\n        \\n        return ResponseFormatter.success_response(\\n            data={\\n                \\\"\",",
          "severity": "HIGH",
          "description": "Secret potentiellement exposé dans un fichier de configuration"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\reports\\latest\\security_report.json",
          "type": "sensitive_data_exposure",
          "pattern": "config",
          "line": 424,
          "line_content": "\"line_content\": \"api_key = self.get_ai_provider_key(provider)\",",
          "match": "api_key = self.get_ai_provider_key(provider)\",",
          "severity": "HIGH",
          "description": "Secret potentiellement exposé dans un fichier de configuration"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\reports\\latest\\security_report.json",
          "type": "sensitive_data_exposure",
          "pattern": "config",
          "line": 425,
          "line_content": "\"match\": \"api_key = self.get_ai_provider_key(provider)\\n                if api_key and api_key.strip():\\n                    configured_providers.append(provider)\\n\\n            return configured_providers\\n        except Exception as e:\\n            self.logger.error(f\\\"Error getting configured providers: {str(e)}\\\")\\n            return []\\n\\n    def _get_active_providers(self) -> List[str]:\\n        \\\"\\\"\\\"\\n        Get list of active providers (only those explicitly configured AND validated by user)\\n        \\\"\\\"\\\"\\n        try:\\n            active_providers = []\\n            all_providers = [\\\"\",",
          "match": "api_key = self.get_ai_provider_key(provider)\\n                if api_key and api_key.strip():\\n                    configured_providers.append(provider)\\n\\n            return configured_providers\\n        except Exception as e:\\n            self.logger.error(f\\\"Error getting configured providers: {str(e)}\\\")\\n            return []\\n\\n    def _get_active_providers(self) -> List[str]:\\n        \\\"\\\"\\\"\\n        Get list of active providers (only those explicitly configured AND validated by user)\\n        \\\"\\\"\\\"\\n        try:\\n            active_providers = []\\n            all_providers = [\\\"\",",
          "severity": "HIGH",
          "description": "Secret potentiellement exposé dans un fichier de configuration"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\reports\\latest\\security_report.json",
          "type": "sensitive_data_exposure",
          "pattern": "config",
          "line": 434,
          "line_content": "\"line_content\": \"api_key = self.get_ai_provider_key(provider)\",",
          "match": "api_key = self.get_ai_provider_key(provider)\",",
          "severity": "HIGH",
          "description": "Secret potentiellement exposé dans un fichier de configuration"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\reports\\latest\\security_report.json",
          "type": "sensitive_data_exposure",
          "pattern": "config",
          "line": 435,
          "line_content": "\"match\": \"api_key = self.get_ai_provider_key(provider)\\n                if not api_key:\\n                    return {\\n                        \\\"success\\\": False,\\n                        \\\"message\\\": f\\\"Aucune clé API configurée pour {provider}\\\",\\n                        \\\"cached\\\": False\\n                    }\\n            \\n            # Tester le provider\\n            from .ai_service import get_ai_service\\n            ai_service = get_ai_service(self.db)\\n            \\n            is_functional = await ai_service.test_provider_with_key(provider, api_key)\\n            \\n            # Le statut est déjà sauvegardé par test_provider_with_key\\n            message = f\\\"\",",
          "match": "api_key = self.get_ai_provider_key(provider)\\n                if not api_key:\\n                    return {\\n                        \\\"success\\\": False,\\n                        \\\"message\\\": f\\\"Aucune clé API configurée pour {provider}\\\",\\n                        \\\"cached\\\": False\\n                    }\\n            \\n            # Tester le provider\\n            from .ai_service import get_ai_service\\n            ai_service = get_ai_service(self.db)\\n            \\n            is_functional = await ai_service.test_provider_with_key(provider, api_key)\\n            \\n            # Le statut est déjà sauvegardé par test_provider_with_key\\n            message = f\\\"\",",
          "severity": "HIGH",
          "description": "Secret potentiellement exposé dans un fichier de configuration"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\reports\\latest\\security_report.json",
          "type": "sensitive_data_exposure",
          "pattern": "config",
          "line": 487,
          "line_content": "\"line_content\": \"token = generate_token()\",",
          "match": "token = generate_token()\",",
          "severity": "HIGH",
          "description": "Secret potentiellement exposé dans un fichier de configuration"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\reports\\latest\\security_report.json",
          "type": "sensitive_data_exposure",
          "pattern": "config",
          "line": 488,
          "line_content": "\"match\": \"token = generate_token()\\n        \\n        # Enregistrer la métrique de connexion\\n        APIUtils.record_api_metric(\\\"login_attempts\\\", 1.0, {\\\"username\\\": username})\\n        \\n        return ResponseFormatter.success_response(\\n            data={\\n                \\\"\",",
          "match": "token = generate_token()\\n        \\n        # Enregistrer la métrique de connexion\\n        APIUtils.record_api_metric(\\\"login_attempts\\\", 1.0, {\\\"username\\\": username})\\n        \\n        return ResponseFormatter.success_response(\\n            data={\\n                \\\"\",",
          "severity": "HIGH",
          "description": "Secret potentiellement exposé dans un fichier de configuration"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\reports\\latest\\security_report.json",
          "type": "sensitive_data_exposure",
          "pattern": "config",
          "line": 557,
          "line_content": "\"line_content\": \"api_key = self.get_ai_provider_key(provider)\",",
          "match": "api_key = self.get_ai_provider_key(provider)\",",
          "severity": "HIGH",
          "description": "Secret potentiellement exposé dans un fichier de configuration"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\reports\\latest\\security_report.json",
          "type": "sensitive_data_exposure",
          "pattern": "config",
          "line": 558,
          "line_content": "\"match\": \"api_key = self.get_ai_provider_key(provider)\\n                if api_key and api_key.strip():\\n                    configured_providers.append(provider)\\n\\n            return configured_providers\\n        except Exception as e:\\n            self.logger.error(f\\\"Error getting configured providers: {str(e)}\\\")\\n            return []\\n\\n    def _get_active_providers(self) -> List[str]:\\n        \\\"\\\"\\\"\\n        Get list of active providers (only those explicitly configured AND validated by user)\\n        \\\"\\\"\\\"\\n        try:\\n            active_providers = []\\n            all_providers = [\\\"\",",
          "match": "api_key = self.get_ai_provider_key(provider)\\n                if api_key and api_key.strip():\\n                    configured_providers.append(provider)\\n\\n            return configured_providers\\n        except Exception as e:\\n            self.logger.error(f\\\"Error getting configured providers: {str(e)}\\\")\\n            return []\\n\\n    def _get_active_providers(self) -> List[str]:\\n        \\\"\\\"\\\"\\n        Get list of active providers (only those explicitly configured AND validated by user)\\n        \\\"\\\"\\\"\\n        try:\\n            active_providers = []\\n            all_providers = [\\\"\",",
          "severity": "HIGH",
          "description": "Secret potentiellement exposé dans un fichier de configuration"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\reports\\latest\\security_report.json",
          "type": "sensitive_data_exposure",
          "pattern": "config",
          "line": 567,
          "line_content": "\"line_content\": \"api_key = self.get_ai_provider_key(provider)\",",
          "match": "api_key = self.get_ai_provider_key(provider)\",",
          "severity": "HIGH",
          "description": "Secret potentiellement exposé dans un fichier de configuration"
        },
        {
          "file": "C:\\Users\\ymora\\Desktop\\Docusense AI\\reports\\latest\\security_report.json",
          "type": "sensitive_data_exposure",
          "pattern": "config",
          "line": 568,
          "line_content": "\"match\": \"api_key = self.get_ai_provider_key(provider)\\n                if not api_key:\\n                    return {\\n                        \\\"success\\\": False,\\n                        \\\"message\\\": f\\\"Aucune clé API configurée pour {provider}\\\",\\n                        \\\"cached\\\": False\\n                    }\\n            \\n            # Tester le provider\\n            from .ai_service import get_ai_service\\n            ai_service = get_ai_service(self.db)\\n            \\n            is_functional = await ai_service.test_provider_with_key(provider, api_key)\\n            \\n            # Le statut est déjà sauvegardé par test_provider_with_key\\n            message = f\\\"\",",
          "match": "api_key = self.get_ai_provider_key(provider)\\n                if not api_key:\\n                    return {\\n                        \\\"success\\\": False,\\n                        \\\"message\\\": f\\\"Aucune clé API configurée pour {provider}\\\",\\n                        \\\"cached\\\": False\\n                    }\\n            \\n            # Tester le provider\\n            from .ai_service import get_ai_service\\n            ai_service = get_ai_service(self.db)\\n            \\n            is_functional = await ai_service.test_provider_with_key(provider, api_key)\\n            \\n            # Le statut est déjà sauvegardé par test_provider_with_key\\n            message = f\\\"\",",
          "severity": "HIGH",
          "description": "Secret potentiellement exposé dans un fichier de configuration"
        }
      ],
      "recommendations": [
        "Utiliser des variables d'environnement pour les secrets",
        "Implémenter une validation stricte des entrées utilisateur",
        "Utiliser des requêtes préparées pour les bases de données",
        "Mettre en place une gestion des erreurs sécurisée",
        "Implémenter des logs de sécurité",
        "Effectuer des tests de sécurité réguliers",
        "Utiliser HTTPS en production",
        "Implémenter une authentification forte",
        "Mettre en place des limites de taux (rate limiting)",
        "Utiliser des algorithmes de chiffrement modernes"
      ]
    },
    "duplication_detection": {
      "duplications_found": 71,
      "duplicated_functions": [
        {
          "function_name": "main",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\test_interface_rapide.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\test_queue_avancee.py",
          "line": 73
        },
        {
          "function_name": "__init__",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\error_monitor.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\performance_monitor.py",
          "line": 19
        },
        {
          "function_name": "__init__",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\error_monitor.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\security.py",
          "line": 23
        },
        {
          "function_name": "__init__",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\cache.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\types.py",
          "line": 69
        },
        {
          "function_name": "__init__",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\database_migration.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\middleware\\log_requests.py",
          "line": 14
        },
        {
          "function_name": "__repr__",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\models\\analysis.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\models\\config.py",
          "line": 29
        },
        {
          "function_name": "__repr__",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\models\\analysis.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\models\\file.py",
          "line": 59
        },
        {
          "function_name": "__repr__",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\models\\analysis.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\models\\file.py",
          "line": 80
        },
        {
          "function_name": "__repr__",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\models\\analysis.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\models\\queue.py",
          "line": 72
        },
        {
          "function_name": "__init__",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\database_migration.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\ai_service.py",
          "line": 45
        },
        {
          "function_name": "sync_request",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\ai_service.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\ai_service.py",
          "line": 718
        },
        {
          "function_name": "sync_request",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\ai_service.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\ai_service.py",
          "line": 493
        },
        {
          "function_name": "sync_request",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\ai_service.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\ai_service.py",
          "line": 534
        },
        {
          "function_name": "__init__",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\database_migration.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\analysis_service.py",
          "line": 26
        },
        {
          "function_name": "__init__",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\database_migration.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\base_service.py",
          "line": 16
        },
        {
          "function_name": "__init__",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\database_migration.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\base_service.py",
          "line": 69
        },
        {
          "function_name": "decorator",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\cache.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\base_service.py",
          "line": 93
        },
        {
          "function_name": "decorator",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\cache.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\base_service.py",
          "line": 22
        },
        {
          "function_name": "decorator",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\cache.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\base_service.py",
          "line": 74
        },
        {
          "function_name": "wrapper",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\cache.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\base_service.py",
          "line": 95
        },
        {
          "function_name": "wrapper",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\cache.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\base_service.py",
          "line": 24
        },
        {
          "function_name": "wrapper",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\cache.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\base_service.py",
          "line": 76
        },
        {
          "function_name": "__init__",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\database_migration.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\config_service.py",
          "line": 28
        },
        {
          "function_name": "get_available_ai_providers_with_priority",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\ai_service.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\config_service.py",
          "line": 912
        },
        {
          "function_name": "__init__",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\database_migration.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\document_extractor_service.py",
          "line": 20
        },
        {
          "function_name": "is_format_supported",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\file_validation.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\document_extractor_service.py",
          "line": 451
        },
        {
          "function_name": "__init__",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\database_migration.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\download_service.py",
          "line": 26
        },
        {
          "function_name": "__init__",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\database_migration.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\email_parser_service.py",
          "line": 22
        },
        {
          "function_name": "__init__",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\database_migration.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\file_service.py",
          "line": 29
        },
        {
          "function_name": "__init__",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\database_migration.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\ocr_service.py",
          "line": 20
        },
        {
          "function_name": "__init__",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\database_migration.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\office_viewer_service.py",
          "line": 24
        },
        {
          "function_name": "get_supported_formats",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\document_extractor_service.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\office_viewer_service.py",
          "line": 358
        },
        {
          "function_name": "is_format_supported",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\file_validation.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\office_viewer_service.py",
          "line": 362
        },
        {
          "function_name": "__init__",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\database_migration.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\pdf_generator_service.py",
          "line": 23
        },
        {
          "function_name": "_generate_analysis_pdf_logic",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\api\\pdf_files.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\pdf_generator_service.py",
          "line": 36
        },
        {
          "function_name": "__init__",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\database_migration.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\prompt_service.py",
          "line": 35
        },
        {
          "function_name": "__init__",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\database_migration.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\queue_service.py",
          "line": 25
        },
        {
          "function_name": "__init__",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\database_migration.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\secure_streaming_service.py",
          "line": 29
        },
        {
          "function_name": "__init__",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\error_monitor.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\streaming_service.py",
          "line": 19
        },
        {
          "function_name": "__init__",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\error_monitor.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\video_converter_service.py",
          "line": 16
        },
        {
          "function_name": "get_media_type",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\streaming_service.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\video_converter_service.py",
          "line": 20
        },
        {
          "function_name": "validate_file_path",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\file_validation.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\utils\\api_utils.py",
          "line": 42
        },
        {
          "function_name": "success_response",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\utils\\api_utils.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\utils\\response_formatter.py",
          "line": 13
        },
        {
          "function_name": "error_response",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\utils\\api_utils.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\utils\\response_formatter.py",
          "line": 28
        }
      ],
      "duplicated_classes": [
        {
          "class_name": "FileInfo",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\api\\download.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\types.py",
          "line": 50
        },
        {
          "class_name": "AnalysisType",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\types.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\models\\analysis.py",
          "line": 16
        },
        {
          "class_name": "Config",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\config.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\models\\analysis.py",
          "line": 122
        },
        {
          "class_name": "Config",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\config.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\models\\config.py",
          "line": 14
        },
        {
          "class_name": "Config",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\config.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\models\\config.py",
          "line": 66
        },
        {
          "class_name": "Config",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\config.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\models\\queue.py",
          "line": 124
        },
        {
          "class_name": "Config",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\config.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\schemas\\file.py",
          "line": 53
        },
        {
          "class_name": "Config",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\config.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\schemas\\file.py",
          "line": 78
        },
        {
          "class_name": "ResponseFormatter",
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\utils\\api_utils.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\utils\\response_formatter.py",
          "line": 9
        }
      ],
      "similar_code_blocks": [
        {
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\test_interface_rapide.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\test_queue_avancee.py",
          "block": "import webbrowser\nfrom pathlib import Path\nimport sys\n\n# Ajouter le répertoire utils au path"
        },
        {
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\test_interface_rapide.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\test_queue_avancee.py",
          "block": "        if not frontend_ok:\n            print(\"• Frontend non accessible - Vérifiez que le frontend ..."
        },
        {
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\test_interface_rapide.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\test_queue_avancee.py",
          "block": "        print(\"2. Démarrer le frontend: cd frontend && npm run dev\")\n        print(\"3. Attendre que ..."
        },
        {
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\generate_pdfs_for_existing_analyses.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\migrate_add_pdf_path.py",
          "block": "import sys\nimport os\nfrom pathlib import Path\n\n# Add the backend directory to the Python path"
        },
        {
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\api\\auth.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\api\\files.py",
          "block": "        )\n        \n    except HTTPException:\n        raise\n    except Exception as e:"
        },
        {
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\api\\auth.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\api\\files.py",
          "block": "        )\n        \n    except HTTPException:\n        raise\n    except Exception as e:"
        },
        {
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\api\\auth.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\api\\secure_streaming.py",
          "block": "        )\n        \n    except HTTPException:\n        raise\n    except Exception as e:"
        },
        {
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\api\\auth.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\api\\video_converter.py",
          "block": "        )\n        \n    except HTTPException:\n        raise\n    except Exception as e:"
        },
        {
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\api\\files.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\api\\secure_streaming.py",
          "block": "        )\n        \n    except HTTPException:\n        raise\n    except Exception as e:"
        },
        {
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\api\\files.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\api\\secure_streaming.py",
          "block": "        )\n        \n    except HTTPException:\n        raise\n    except Exception as e:"
        },
        {
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\api\\files.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\api\\video_converter.py",
          "block": "        )\n        \n    except HTTPException:\n        raise\n    except Exception as e:"
        },
        {
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\api\\files.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\api\\video_converter.py",
          "block": "        )\n        \n    except HTTPException:\n        raise\n    except Exception as e:"
        },
        {
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\api\\multimedia.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\api\\secure_streaming.py",
          "block": "from fastapi.responses import FileResponse, StreamingResponse\nfrom sqlalchemy.orm import Session\nfro..."
        },
        {
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\api\\secure_streaming.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\api\\video_converter.py",
          "block": "        )\n        \n    except HTTPException:\n        raise\n    except Exception as e:"
        },
        {
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\core\\logging.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\utils\\logger.py",
          "block": "\"\"\"\nLogging configuration for DocuSense AI\n\"\"\"\n\nimport logging"
        },
        {
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\document_extractor_service.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\multimedia_service.py",
          "block": "        \n        Args:\n            file_path: Chemin vers le fichier\n            \n        Returns:"
        },
        {
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\download_service.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\services\\secure_streaming_service.py",
          "block": "        # Déterminer le type MIME\n        mime_type, _ = mimetypes.guess_type(str(file_path))\n      ..."
        },
        {
          "file1": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\api\\analysis\\analysis_creation.py",
          "file2": "C:\\Users\\ymora\\Desktop\\Docusense AI\\backend\\app\\api\\analysis\\analysis_management.py",
          "block": "    # Get the prompt text if prompt_id is provided\n    if prompt_id and prompt_id != \"default\":\n    ..."
        }
      ]
    },
    "dead_code_detection": {
      "summary": {
        "total_files": 75,
        "total_functions": 506,
        "total_classes": 108,
        "dead_functions_count": 429,
        "dead_classes_count": 19,
        "dead_code_percentage": 72.96
      },
      "dead_functions": [
        {
          "file": "error_monitor.py",
          "name": "start_monitoring",
          "line": 49,
          "end_line": 66,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "error_monitor.py",
          "name": "start_backend",
          "line": 68,
          "end_line": 86,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "error_monitor.py",
          "name": "start_frontend",
          "line": 88,
          "end_line": 106,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "error_monitor.py",
          "name": "capture_backend_logs",
          "line": 108,
          "end_line": 118,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "error_monitor.py",
          "name": "capture_frontend_logs",
          "line": 120,
          "end_line": 130,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "error_monitor.py",
          "name": "check_error_patterns",
          "line": 132,
          "end_line": 140,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "error_monitor.py",
          "name": "fix_missing_module",
          "line": 142,
          "end_line": 160,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "error_monitor.py",
          "name": "fix_npm_module",
          "line": 162,
          "end_line": 173,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "error_monitor.py",
          "name": "fix_port_conflict",
          "line": 175,
          "end_line": 196,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "error_monitor.py",
          "name": "fix_database_error",
          "line": 198,
          "end_line": 210,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "error_monitor.py",
          "name": "fix_file_not_found",
          "line": 212,
          "end_line": 222,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "error_monitor.py",
          "name": "fix_indentation_error",
          "line": 224,
          "end_line": 228,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "error_monitor.py",
          "name": "fix_syntax_error",
          "line": 230,
          "end_line": 233,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "error_monitor.py",
          "name": "fix_type_error",
          "line": 235,
          "end_line": 238,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "error_monitor.py",
          "name": "fix_attribute_error",
          "line": 240,
          "end_line": 243,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "error_monitor.py",
          "name": "fix_permission_error",
          "line": 245,
          "end_line": 248,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "error_monitor.py",
          "name": "restart_backend",
          "line": 250,
          "end_line": 255,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "error_monitor.py",
          "name": "restart_frontend",
          "line": 257,
          "end_line": 262,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "error_monitor.py",
          "name": "check_processes",
          "line": 264,
          "end_line": 272,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "error_monitor.py",
          "name": "analyze_logs",
          "line": 274,
          "end_line": 287,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "error_monitor.py",
          "name": "cleanup",
          "line": 289,
          "end_line": 299,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\cache.py",
          "name": "is_expired",
          "line": 29,
          "end_line": 31,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\cache.py",
          "name": "access",
          "line": 33,
          "end_line": 36,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\cache.py",
          "name": "_cleanup_expired",
          "line": 64,
          "end_line": 77,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\cache.py",
          "name": "_evict_lru",
          "line": 79,
          "end_line": 97,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\cache.py",
          "name": "clear",
          "line": 134,
          "end_line": 138,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\cache.py",
          "name": "get_stats",
          "line": 140,
          "end_line": 151,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\cache.py",
          "name": "generate_key",
          "line": 153,
          "end_line": 176,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\config.py",
          "name": "parse_cors_origins",
          "line": 109,
          "end_line": 113,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\config.py",
          "name": "validate_secret_key",
          "line": 116,
          "end_line": 120,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\database_migration.py",
          "name": "run_migrations",
          "line": 28,
          "end_line": 64,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\database_migration.py",
          "name": "_migrate_file_statuses",
          "line": 66,
          "end_line": 96,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\database_migration.py",
          "name": "_migrate_mime_types",
          "line": 98,
          "end_line": 134,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\database_migration.py",
          "name": "_cleanup_orphaned_files",
          "line": 136,
          "end_line": 169,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\database_migration.py",
          "name": "_update_file_metadata",
          "line": 171,
          "end_line": 220,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\database_utils.py",
          "name": "safe_transaction",
          "line": 24,
          "end_line": 32,
          "is_async": false,
          "decorators": [
            "staticmethod",
            "contextmanager"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\database_utils.py",
          "name": "bulk_operation",
          "line": 35,
          "end_line": 47,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\database_utils.py",
          "name": "safe_query",
          "line": 50,
          "end_line": 56,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\database_utils.py",
          "name": "build_file_filters",
          "line": 65,
          "end_line": 78,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\database_utils.py",
          "name": "build_pagination_query",
          "line": 81,
          "end_line": 84,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\database_utils.py",
          "name": "validate_file_exists",
          "line": 93,
          "end_line": 95,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\database_utils.py",
          "name": "validate_directory_exists",
          "line": 98,
          "end_line": 100,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\database_utils.py",
          "name": "get_file_count_by_status",
          "line": 109,
          "end_line": 136,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\database_utils.py",
          "name": "get_total_file_count",
          "line": 139,
          "end_line": 151,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\file_utils.py",
          "name": "extract_file_info",
          "line": 24,
          "end_line": 41,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\file_utils.py",
          "name": "_get_mime_type",
          "line": 44,
          "end_line": 48,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\file_utils.py",
          "name": "extract_directory_info",
          "line": 57,
          "end_line": 72,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\file_utils.py",
          "name": "normalize_path",
          "line": 81,
          "end_line": 83,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\file_utils.py",
          "name": "is_subdirectory",
          "line": 86,
          "end_line": 93,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\file_utils.py",
          "name": "get_relative_path",
          "line": 96,
          "end_line": 103,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\file_validation.py",
          "name": "get_file_type",
          "line": 59,
          "end_line": 72,
          "is_async": false,
          "decorators": [
            "classmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\file_validation.py",
          "name": "is_format_supported",
          "line": 75,
          "end_line": 83,
          "is_async": false,
          "decorators": [
            "classmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\file_validation.py",
          "name": "validate_file",
          "line": 86,
          "end_line": 129,
          "is_async": false,
          "decorators": [
            "classmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\file_validation.py",
          "name": "validate_file_path",
          "line": 132,
          "end_line": 216,
          "is_async": false,
          "decorators": [
            "classmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\file_validation.py",
          "name": "_get_mime_type_from_extension",
          "line": 219,
          "end_line": 225,
          "is_async": false,
          "decorators": [
            "classmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\file_validation.py",
          "name": "get_all_supported_formats",
          "line": 228,
          "end_line": 232,
          "is_async": false,
          "decorators": [
            "classmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\file_validation.py",
          "name": "validate_file_for_streaming",
          "line": 242,
          "end_line": 272,
          "is_async": false,
          "decorators": [
            "classmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\file_validation.py",
          "name": "get_mime_type",
          "line": 275,
          "end_line": 289,
          "is_async": false,
          "decorators": [
            "classmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\file_validation.py",
          "name": "validate_directory_path",
          "line": 292,
          "end_line": 358,
          "is_async": false,
          "decorators": [
            "classmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\file_validation.py",
          "name": "get_supported_formats_for_type",
          "line": 361,
          "end_line": 365,
          "is_async": false,
          "decorators": [
            "classmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\media_formats.py",
          "name": "get_extensions_by_type",
          "line": 386,
          "end_line": 397,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\media_formats.py",
          "name": "get_mime_types_by_type",
          "line": 400,
          "end_line": 411,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\performance_monitor.py",
          "name": "record_metric",
          "line": 24,
          "end_line": 31,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\performance_monitor.py",
          "name": "get_summary",
          "line": 34,
          "end_line": 55,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\security.py",
          "name": "hash_password",
          "line": 73,
          "end_line": 78,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\security.py",
          "name": "verify_password",
          "line": 80,
          "end_line": 88,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\security.py",
          "name": "encrypt_data",
          "line": 193,
          "end_line": 209,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\security.py",
          "name": "decrypt_data",
          "line": 212,
          "end_line": 228,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\security.py",
          "name": "generate_salt",
          "line": 231,
          "end_line": 233,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\security.py",
          "name": "hash_with_salt",
          "line": 236,
          "end_line": 240,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\security.py",
          "name": "load_config",
          "line": 29,
          "end_line": 57,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\security.py",
          "name": "save_config",
          "line": 59,
          "end_line": 71,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\security.py",
          "name": "login",
          "line": 90,
          "end_line": 104,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\security.py",
          "name": "verify_session",
          "line": 106,
          "end_line": 121,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\security.py",
          "name": "logout",
          "line": 123,
          "end_line": 127,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\security.py",
          "name": "change_password",
          "line": 129,
          "end_line": 136,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\security.py",
          "name": "get_session_info",
          "line": 138,
          "end_line": 147,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\security.py",
          "name": "cleanup_expired_sessions",
          "line": 149,
          "end_line": 162,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\status_manager.py",
          "name": "get_status_info",
          "line": 85,
          "end_line": 95,
          "is_async": false,
          "decorators": [
            "classmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\status_manager.py",
          "name": "get_status_by_value",
          "line": 98,
          "end_line": 103,
          "is_async": false,
          "decorators": [
            "classmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\status_manager.py",
          "name": "get_all_statuses",
          "line": 106,
          "end_line": 108,
          "is_async": false,
          "decorators": [
            "classmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\status_manager.py",
          "name": "get_analyzeable_statuses",
          "line": 111,
          "end_line": 113,
          "is_async": false,
          "decorators": [
            "classmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\status_manager.py",
          "name": "get_retryable_statuses",
          "line": 116,
          "end_line": 118,
          "is_async": false,
          "decorators": [
            "classmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\status_manager.py",
          "name": "get_status_labels",
          "line": 121,
          "end_line": 129,
          "is_async": false,
          "decorators": [
            "classmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\status_manager.py",
          "name": "can_transition_to",
          "line": 148,
          "end_line": 161,
          "is_async": false,
          "decorators": [
            "classmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\status_manager.py",
          "name": "analyze_status",
          "line": 170,
          "end_line": 185,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\status_manager.py",
          "name": "get_status_statistics",
          "line": 188,
          "end_line": 193,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\validation.py",
          "name": "validate_string",
          "line": 48,
          "end_line": 78,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\validation.py",
          "name": "validate_integer",
          "line": 81,
          "end_line": 113,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\validation.py",
          "name": "validate_path",
          "line": 116,
          "end_line": 140,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\validation.py",
          "name": "format_validation_errors",
          "line": 149,
          "end_line": 170,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\validation.py",
          "name": "log_validation_errors",
          "line": 173,
          "end_line": 177,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\core\\validation.py",
          "name": "create_validation_error",
          "line": 180,
          "end_line": 182,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ai_service.py",
          "name": "_load_providers",
          "line": 59,
          "end_line": 61,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ai_service.py",
          "name": "_load_providers_logic",
          "line": 63,
          "end_line": 70,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ai_service.py",
          "name": "_load_provider_configs",
          "line": 73,
          "end_line": 78,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ai_service.py",
          "name": "_log_provider_loading",
          "line": 80,
          "end_line": 84,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ai_service.py",
          "name": "_load_default_providers",
          "line": 86,
          "end_line": 94,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ai_service.py",
          "name": "_get_default_provider_configs",
          "line": 97,
          "end_line": 153,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ai_service.py",
          "name": "_sort_providers_by_priority",
          "line": 157,
          "end_line": 160,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ai_service.py",
          "name": "_create_temp_provider_config",
          "line": 200,
          "end_line": 210,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ai_service.py",
          "name": "_get_default_base_url",
          "line": 212,
          "end_line": 220,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ai_service.py",
          "name": "_get_default_model",
          "line": 222,
          "end_line": 230,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ai_service.py",
          "name": "_get_default_models",
          "line": 232,
          "end_line": 240,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ai_service.py",
          "name": "_select_model_for_provider",
          "line": 338,
          "end_line": 347,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ai_service.py",
          "name": "_select_provider_by_strategy",
          "line": 349,
          "end_line": 375,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ai_service.py",
          "name": "_generate_prompt",
          "line": 617,
          "end_line": 640,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ai_service.py",
          "name": "_estimate_tokens",
          "line": 744,
          "end_line": 747,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ai_service.py",
          "name": "_estimate_cost",
          "line": 749,
          "end_line": 764,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ai_service.py",
          "name": "validate_provider_config",
          "line": 766,
          "end_line": 775,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ai_service.py",
          "name": "get_available_ai_providers_with_priority",
          "line": 809,
          "end_line": 813,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ai_service.py",
          "name": "save_provider_config",
          "line": 815,
          "end_line": 835,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ai_service.py",
          "name": "get_provider_config",
          "line": 837,
          "end_line": 839,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ai_service.py",
          "name": "delete_provider_config",
          "line": 841,
          "end_line": 857,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ai_service.py",
          "name": "clear_cache",
          "line": 860,
          "end_line": 865,
          "is_async": false,
          "decorators": [
            "classmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ai_service.py",
          "name": "get_cache_size",
          "line": 868,
          "end_line": 870,
          "is_async": false,
          "decorators": [
            "classmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\analysis_service.py",
          "name": "create_analysis",
          "line": 34,
          "end_line": 46,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\analysis_service.py",
          "name": "_create_analysis_logic",
          "line": 48,
          "end_line": 87,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\analysis_service.py",
          "name": "get_analysis",
          "line": 90,
          "end_line": 92,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\analysis_service.py",
          "name": "_get_analysis_logic",
          "line": 94,
          "end_line": 96,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\analysis_service.py",
          "name": "get_analyses",
          "line": 99,
          "end_line": 111,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\analysis_service.py",
          "name": "_get_analyses_logic",
          "line": 113,
          "end_line": 129,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\analysis_service.py",
          "name": "update_analysis",
          "line": 132,
          "end_line": 140,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\analysis_service.py",
          "name": "_update_analysis_logic",
          "line": 142,
          "end_line": 156,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\analysis_service.py",
          "name": "delete_analysis",
          "line": 159,
          "end_line": 163,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\analysis_service.py",
          "name": "_delete_analysis_logic",
          "line": 165,
          "end_line": 183,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\analysis_service.py",
          "name": "create_bulk_analyses",
          "line": 186,
          "end_line": 198,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\analysis_service.py",
          "name": "_create_bulk_analyses_logic",
          "line": 200,
          "end_line": 220,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\analysis_service.py",
          "name": "get_analysis_stats",
          "line": 223,
          "end_line": 227,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\analysis_service.py",
          "name": "_get_analysis_stats_logic",
          "line": 229,
          "end_line": 266,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\analysis_service.py",
          "name": "retry_failed_analysis",
          "line": 269,
          "end_line": 273,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\analysis_service.py",
          "name": "_retry_failed_analysis_logic",
          "line": 275,
          "end_line": 301,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\analysis_service.py",
          "name": "cancel_analysis",
          "line": 304,
          "end_line": 308,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\analysis_service.py",
          "name": "_cancel_analysis_logic",
          "line": 310,
          "end_line": 336,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\analysis_service.py",
          "name": "create_analysis_with_prompt",
          "line": 366,
          "end_line": 377,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\analysis_service.py",
          "name": "_create_analysis_with_prompt_logic",
          "line": 379,
          "end_line": 401,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\analysis_service.py",
          "name": "update_analysis_result",
          "line": 404,
          "end_line": 413,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\analysis_service.py",
          "name": "_update_analysis_result_logic",
          "line": 415,
          "end_line": 445,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\base_service.py",
          "name": "log_operation",
          "line": 20,
          "end_line": 34,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\base_service.py",
          "name": "safe_execute",
          "line": 36,
          "end_line": 45,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\base_service.py",
          "name": "get_service_info",
          "line": 58,
          "end_line": 63,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\base_service.py",
          "name": "handle_operation",
          "line": 72,
          "end_line": 83,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_load_cache",
          "line": 34,
          "end_line": 36,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_load_cache_logic",
          "line": 38,
          "end_line": 47,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_load_default_configs",
          "line": 50,
          "end_line": 52,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_load_default_configs_logic",
          "line": 54,
          "end_line": 60,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "get_config",
          "line": 64,
          "end_line": 68,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_get_config_logic",
          "line": 70,
          "end_line": 82,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "set_config",
          "line": 85,
          "end_line": 96,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_set_config_logic",
          "line": 98,
          "end_line": 128,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "delete_config",
          "line": 131,
          "end_line": 135,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_delete_config_logic",
          "line": 137,
          "end_line": 151,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "get_configs_by_category",
          "line": 154,
          "end_line": 158,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_get_configs_by_category_logic",
          "line": 160,
          "end_line": 162,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "get_all_configs",
          "line": 165,
          "end_line": 169,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_get_all_configs_logic",
          "line": 171,
          "end_line": 173,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "get_categories",
          "line": 176,
          "end_line": 180,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_get_categories_logic",
          "line": 182,
          "end_line": 185,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "get_ai_provider_config",
          "line": 189,
          "end_line": 194,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_get_ai_provider_config_logic",
          "line": 196,
          "end_line": 210,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "set_ai_provider_config",
          "line": 213,
          "end_line": 218,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_set_ai_provider_config_logic",
          "line": 220,
          "end_line": 240,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "delete_ai_provider_config",
          "line": 243,
          "end_line": 247,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_delete_ai_provider_config_logic",
          "line": 249,
          "end_line": 258,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "get_ui_config",
          "line": 262,
          "end_line": 266,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_get_ui_config_logic",
          "line": 268,
          "end_line": 282,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "set_ui_config",
          "line": 285,
          "end_line": 289,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_set_ui_config_logic",
          "line": 291,
          "end_line": 305,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "get_system_config",
          "line": 309,
          "end_line": 313,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_get_system_config_logic",
          "line": 315,
          "end_line": 329,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "set_system_config",
          "line": 332,
          "end_line": 336,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_set_system_config_logic",
          "line": 338,
          "end_line": 357,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "initialize_default_configs",
          "line": 361,
          "end_line": 431,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_initialize_ai_provider_configs",
          "line": 434,
          "end_line": 508,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "export_configs",
          "line": 511,
          "end_line": 515,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_export_configs_logic",
          "line": 517,
          "end_line": 539,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "import_configs",
          "line": 542,
          "end_line": 546,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_import_configs_logic",
          "line": 548,
          "end_line": 566,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "get_ai_provider_priority",
          "line": 571,
          "end_line": 575,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_get_ai_provider_priority_logic",
          "line": 577,
          "end_line": 584,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "get_all_provider_priorities",
          "line": 587,
          "end_line": 592,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_get_all_provider_priorities_logic",
          "line": 594,
          "end_line": 620,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "set_ai_provider_priority",
          "line": 623,
          "end_line": 628,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_set_ai_provider_priority_logic",
          "line": 630,
          "end_line": 694,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_set_provider_priority_internal",
          "line": 696,
          "end_line": 706,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_get_configured_providers",
          "line": 708,
          "end_line": 725,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_get_active_providers",
          "line": 727,
          "end_line": 751,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "get_ai_provider_strategy",
          "line": 756,
          "end_line": 760,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "set_ai_provider_strategy",
          "line": 763,
          "end_line": 767,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_set_ai_provider_strategy_logic",
          "line": 769,
          "end_line": 787,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "validate_and_fix_priorities",
          "line": 790,
          "end_line": 794,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_validate_and_fix_priorities_logic",
          "line": 796,
          "end_line": 878,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "reset_all_priorities",
          "line": 881,
          "end_line": 886,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_reset_all_priorities_logic",
          "line": 888,
          "end_line": 909,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "get_available_ai_providers_with_priority",
          "line": 912,
          "end_line": 917,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_get_available_ai_providers_with_priority_logic",
          "line": 919,
          "end_line": 981,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "get_functional_providers_count",
          "line": 1119,
          "end_line": 1123,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_get_functional_providers_count_logic",
          "line": 1125,
          "end_line": 1132,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "update_provider_functionality_status",
          "line": 1135,
          "end_line": 1139,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_update_provider_functionality_status_logic",
          "line": 1141,
          "end_line": 1165,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "get_provider_functionality_status",
          "line": 1168,
          "end_line": 1172,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_get_provider_functionality_status_logic",
          "line": 1174,
          "end_line": 1187,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "get_provider_last_tested",
          "line": 1190,
          "end_line": 1194,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_get_provider_last_tested_logic",
          "line": 1196,
          "end_line": 1204,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "set_provider_status",
          "line": 1207,
          "end_line": 1211,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_set_provider_status_logic",
          "line": 1213,
          "end_line": 1229,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "get_provider_status",
          "line": 1232,
          "end_line": 1236,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_get_provider_status_logic",
          "line": 1238,
          "end_line": 1246,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "set_ai_provider_key",
          "line": 1249,
          "end_line": 1253,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_set_ai_provider_key_logic",
          "line": 1255,
          "end_line": 1274,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_save_api_key_to_settings",
          "line": 1276,
          "end_line": 1297,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_load_api_keys_from_database_logic",
          "line": 1307,
          "end_line": 1329,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "get_ai_provider_key",
          "line": 1332,
          "end_line": 1336,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_get_ai_provider_key_logic",
          "line": 1338,
          "end_line": 1345,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "set_ai_provider_model",
          "line": 1348,
          "end_line": 1352,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_set_ai_provider_model_logic",
          "line": 1354,
          "end_line": 1370,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "get_ai_provider_model",
          "line": 1373,
          "end_line": 1377,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_get_ai_provider_model_logic",
          "line": 1379,
          "end_line": 1388,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "get_ai_metrics",
          "line": 1391,
          "end_line": 1395,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_get_ai_metrics_logic",
          "line": 1397,
          "end_line": 1419,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "name": "_get_default_provider_config",
          "line": 1502,
          "end_line": 1551,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\document_extractor_service.py",
          "name": "_extract_from_docx",
          "line": 86,
          "end_line": 113,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\document_extractor_service.py",
          "name": "_extract_from_doc",
          "line": 115,
          "end_line": 145,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\document_extractor_service.py",
          "name": "_extract_from_xlsx",
          "line": 147,
          "end_line": 175,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\document_extractor_service.py",
          "name": "_extract_from_xls",
          "line": 177,
          "end_line": 206,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\document_extractor_service.py",
          "name": "_extract_from_csv",
          "line": 208,
          "end_line": 226,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\document_extractor_service.py",
          "name": "_extract_from_pptx",
          "line": 228,
          "end_line": 251,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\document_extractor_service.py",
          "name": "_extract_from_ppt",
          "line": 253,
          "end_line": 262,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\document_extractor_service.py",
          "name": "_extract_from_pdf",
          "line": 264,
          "end_line": 284,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\document_extractor_service.py",
          "name": "_extract_from_txt",
          "line": 286,
          "end_line": 295,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\document_extractor_service.py",
          "name": "_extract_from_html",
          "line": 297,
          "end_line": 323,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\document_extractor_service.py",
          "name": "_extract_from_rtf",
          "line": 325,
          "end_line": 352,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\document_extractor_service.py",
          "name": "_extract_from_odt",
          "line": 354,
          "end_line": 383,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\document_extractor_service.py",
          "name": "_extract_from_ods",
          "line": 385,
          "end_line": 414,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\document_extractor_service.py",
          "name": "_extract_from_odp",
          "line": 416,
          "end_line": 445,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\document_extractor_service.py",
          "name": "is_format_supported",
          "line": 451,
          "end_line": 453,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\download_service.py",
          "name": "get_file_info",
          "line": 37,
          "end_line": 47,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\download_service.py",
          "name": "_get_file_info_logic",
          "line": 49,
          "end_line": 66,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\download_service.py",
          "name": "download_file",
          "line": 69,
          "end_line": 79,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\download_service.py",
          "name": "_download_file_logic",
          "line": 81,
          "end_line": 112,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\download_service.py",
          "name": "create_zip_from_directory",
          "line": 115,
          "end_line": 126,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\download_service.py",
          "name": "_create_zip_from_directory_logic",
          "line": 128,
          "end_line": 169,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\download_service.py",
          "name": "create_zip_from_files",
          "line": 172,
          "end_line": 183,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\download_service.py",
          "name": "_create_zip_from_files_logic",
          "line": 185,
          "end_line": 228,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\download_service.py",
          "name": "download_directory",
          "line": 231,
          "end_line": 242,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\download_service.py",
          "name": "_download_directory_logic",
          "line": 244,
          "end_line": 252,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\download_service.py",
          "name": "download_multiple_files",
          "line": 255,
          "end_line": 266,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\download_service.py",
          "name": "_download_multiple_files_logic",
          "line": 268,
          "end_line": 276,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\download_service.py",
          "name": "cleanup_temp_files",
          "line": 279,
          "end_line": 287,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\download_service.py",
          "name": "_cleanup_temp_files_logic",
          "line": 289,
          "end_line": 340,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\download_service.py",
          "name": "get_download_stats",
          "line": 343,
          "end_line": 350,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\download_service.py",
          "name": "_get_download_stats_logic",
          "line": 352,
          "end_line": 367,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\email_parser_service.py",
          "name": "parse_email_file",
          "line": 28,
          "end_line": 42,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\email_parser_service.py",
          "name": "_parse_email_file_logic",
          "line": 44,
          "end_line": 73,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\email_parser_service.py",
          "name": "_get_header",
          "line": 75,
          "end_line": 87,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\email_parser_service.py",
          "name": "_extract_headers",
          "line": 89,
          "end_line": 97,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\email_parser_service.py",
          "name": "_extract_body",
          "line": 99,
          "end_line": 114,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\email_parser_service.py",
          "name": "_extract_html_content",
          "line": 116,
          "end_line": 138,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\email_parser_service.py",
          "name": "_extract_text_content",
          "line": 140,
          "end_line": 151,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\email_parser_service.py",
          "name": "_extract_attachments",
          "line": 153,
          "end_line": 186,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\email_parser_service.py",
          "name": "extract_attachment",
          "line": 188,
          "end_line": 239,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\email_parser_service.py",
          "name": "format_email_for_display",
          "line": 241,
          "end_line": 285,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\file_service.py",
          "name": "_create_file",
          "line": 53,
          "end_line": 91,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\file_service.py",
          "name": "get_files",
          "line": 94,
          "end_line": 106,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\file_service.py",
          "name": "_get_files_logic",
          "line": 108,
          "end_line": 166,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\file_service.py",
          "name": "_get_status_counts",
          "line": 168,
          "end_line": 172,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\file_service.py",
          "name": "update_file_status",
          "line": 175,
          "end_line": 184,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\file_service.py",
          "name": "_update_file_status_logic",
          "line": 186,
          "end_line": 197,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\file_service.py",
          "name": "toggle_file_selection",
          "line": 200,
          "end_line": 204,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\file_service.py",
          "name": "_toggle_file_selection_logic",
          "line": 206,
          "end_line": 217,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\file_service.py",
          "name": "select_all_files",
          "line": 220,
          "end_line": 224,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\file_service.py",
          "name": "_select_all_files_logic",
          "line": 226,
          "end_line": 236,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\file_service.py",
          "name": "deselect_all_files",
          "line": 239,
          "end_line": 243,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\file_service.py",
          "name": "_deselect_all_files_logic",
          "line": 245,
          "end_line": 255,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\file_service.py",
          "name": "get_selected_files",
          "line": 258,
          "end_line": 262,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\file_service.py",
          "name": "_get_selected_files_logic",
          "line": 264,
          "end_line": 266,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\file_service.py",
          "name": "update_file_analysis_result",
          "line": 269,
          "end_line": 278,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\file_service.py",
          "name": "_update_file_analysis_result_logic",
          "line": 280,
          "end_line": 296,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\file_service.py",
          "name": "delete_file",
          "line": 299,
          "end_line": 303,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\file_service.py",
          "name": "_delete_file_logic",
          "line": 305,
          "end_line": 315,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\file_service.py",
          "name": "get_directory_stats",
          "line": 318,
          "end_line": 322,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\file_service.py",
          "name": "_get_directory_stats_logic",
          "line": 324,
          "end_line": 340,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\file_service.py",
          "name": "get_workflow_stats",
          "line": 344,
          "end_line": 376,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\file_service.py",
          "name": "get_file_by_id",
          "line": 378,
          "end_line": 386,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\file_service.py",
          "name": "get_file_analysis_result",
          "line": 388,
          "end_line": 424,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\file_service.py",
          "name": "_check_disk_accessibility",
          "line": 430,
          "end_line": 495,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\file_service.py",
          "name": "list_directory_content_paginated",
          "line": 500,
          "end_line": 701,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\file_service.py",
          "name": "_is_analysis_still_valid",
          "line": 703,
          "end_line": 725,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\file_service.py",
          "name": "_update_file_status_auto",
          "line": 727,
          "end_line": 756,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\file_service.py",
          "name": "_create_file_auto",
          "line": 758,
          "end_line": 790,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\file_service.py",
          "name": "_synchronize_database_with_filesystem",
          "line": 792,
          "end_line": 828,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\file_service.py",
          "name": "cleanup_orphaned_files",
          "line": 830,
          "end_line": 864,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\multimedia_service.py",
          "name": "get_file_type",
          "line": 48,
          "end_line": 67,
          "is_async": false,
          "decorators": [
            "staticmethod",
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\multimedia_service.py",
          "name": "analyze_image",
          "line": 71,
          "end_line": 111,
          "is_async": false,
          "decorators": [
            "staticmethod",
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\multimedia_service.py",
          "name": "analyze_video",
          "line": 114,
          "end_line": 240,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\multimedia_service.py",
          "name": "analyze_audio",
          "line": 243,
          "end_line": 285,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\multimedia_service.py",
          "name": "generate_thumbnail",
          "line": 288,
          "end_line": 313,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\multimedia_service.py",
          "name": "_extract_dominant_colors",
          "line": 316,
          "end_line": 347,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\multimedia_service.py",
          "name": "_create_image_thumbnail",
          "line": 350,
          "end_line": 356,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\multimedia_service.py",
          "name": "_create_video_thumbnail",
          "line": 359,
          "end_line": 375,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\multimedia_service.py",
          "name": "_create_audio_thumbnail",
          "line": 378,
          "end_line": 401,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\multimedia_service.py",
          "name": "optimize_video",
          "line": 404,
          "end_line": 511,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\multimedia_service.py",
          "name": "optimize_audio",
          "line": 514,
          "end_line": 601,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\multimedia_service.py",
          "name": "_check_ffmpeg",
          "line": 604,
          "end_line": 620,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\multimedia_service.py",
          "name": "create_optimized_stream",
          "line": 623,
          "end_line": 676,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\multimedia_service.py",
          "name": "get_media_info",
          "line": 679,
          "end_line": 698,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ocr_service.py",
          "name": "validate_ocr_quality",
          "line": 253,
          "end_line": 257,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ocr_service.py",
          "name": "_validate_ocr_quality_logic",
          "line": 259,
          "end_line": 286,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ocr_service.py",
          "name": "get_ocr_stats",
          "line": 289,
          "end_line": 293,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ocr_service.py",
          "name": "_get_ocr_stats_logic",
          "line": 295,
          "end_line": 320,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ocr_service.py",
          "name": "cleanup_temp_files",
          "line": 323,
          "end_line": 327,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ocr_service.py",
          "name": "_cleanup_temp_files_logic",
          "line": 329,
          "end_line": 333,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ocr_service.py",
          "name": "is_ocr_needed",
          "line": 336,
          "end_line": 340,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\ocr_service.py",
          "name": "_is_ocr_needed_logic",
          "line": 342,
          "end_line": 361,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\office_viewer_service.py",
          "name": "_convert_docx_to_html",
          "line": 88,
          "end_line": 122,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\office_viewer_service.py",
          "name": "_convert_xlsx_to_html",
          "line": 124,
          "end_line": 162,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\office_viewer_service.py",
          "name": "_convert_pptx_to_html",
          "line": 164,
          "end_line": 193,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\office_viewer_service.py",
          "name": "_convert_doc_to_html",
          "line": 195,
          "end_line": 220,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\office_viewer_service.py",
          "name": "_convert_xls_to_html",
          "line": 222,
          "end_line": 244,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\office_viewer_service.py",
          "name": "_convert_ppt_to_html",
          "line": 246,
          "end_line": 268,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\office_viewer_service.py",
          "name": "_convert_odt_to_html",
          "line": 270,
          "end_line": 295,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\office_viewer_service.py",
          "name": "_convert_ods_to_html",
          "line": 297,
          "end_line": 319,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\office_viewer_service.py",
          "name": "_convert_odp_to_html",
          "line": 321,
          "end_line": 343,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\office_viewer_service.py",
          "name": "_fallback_conversion",
          "line": 345,
          "end_line": 356,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\office_viewer_service.py",
          "name": "is_format_supported",
          "line": 362,
          "end_line": 364,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\pdf_generator_service.py",
          "name": "generate_analysis_pdf",
          "line": 29,
          "end_line": 34,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\pdf_generator_service.py",
          "name": "_create_pdf_content",
          "line": 78,
          "end_line": 247,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\pdf_generator_service.py",
          "name": "_write_pdf_file",
          "line": 249,
          "end_line": 310,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\pdf_generator_service.py",
          "name": "_format_file_size",
          "line": 312,
          "end_line": 321,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\pdf_generator_service.py",
          "name": "generate_pdfs_for_completed_analyses",
          "line": 324,
          "end_line": 329,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\pdf_generator_service.py",
          "name": "_generate_pdfs_for_completed_analyses_logic",
          "line": 331,
          "end_line": 351,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\prompt_service.py",
          "name": "_load_prompts_from_json",
          "line": 42,
          "end_line": 48,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\prompt_service.py",
          "name": "_load_prompts_logic",
          "line": 50,
          "end_line": 59,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\prompt_service.py",
          "name": "get_default_prompt",
          "line": 61,
          "end_line": 67,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\prompt_service.py",
          "name": "_get_default_prompt_logic",
          "line": 69,
          "end_line": 71,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\prompt_service.py",
          "name": "get_prompts_by_domain",
          "line": 73,
          "end_line": 79,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\prompt_service.py",
          "name": "_get_prompts_by_domain_logic",
          "line": 81,
          "end_line": 87,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\prompt_service.py",
          "name": "get_prompts_by_type",
          "line": 89,
          "end_line": 95,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\prompt_service.py",
          "name": "_get_prompts_by_type_logic",
          "line": 97,
          "end_line": 103,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\prompt_service.py",
          "name": "get_prompt",
          "line": 105,
          "end_line": 111,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\prompt_service.py",
          "name": "_get_prompt_logic",
          "line": 113,
          "end_line": 115,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\prompt_service.py",
          "name": "format_prompt",
          "line": 117,
          "end_line": 123,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\prompt_service.py",
          "name": "_format_prompt_logic",
          "line": 125,
          "end_line": 130,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\prompt_service.py",
          "name": "get_all_prompts",
          "line": 132,
          "end_line": 138,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\prompt_service.py",
          "name": "_get_all_prompts_logic",
          "line": 140,
          "end_line": 142,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\prompt_service.py",
          "name": "get_all_default_prompts",
          "line": 144,
          "end_line": 150,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\prompt_service.py",
          "name": "_get_all_default_prompts_logic",
          "line": 152,
          "end_line": 154,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\prompt_service.py",
          "name": "get_prompts_summary",
          "line": 156,
          "end_line": 162,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\prompt_service.py",
          "name": "_get_prompts_summary_logic",
          "line": 164,
          "end_line": 187,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\prompt_service.py",
          "name": "reload_prompts",
          "line": 189,
          "end_line": 195,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\prompt_service.py",
          "name": "_reload_prompts_logic",
          "line": 197,
          "end_line": 205,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "_add_to_queue_logic",
          "line": 41,
          "end_line": 56,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "_validate_analysis_exists",
          "line": 58,
          "end_line": 62,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "_check_duplicate_queue_item",
          "line": 64,
          "end_line": 72,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "_create_queue_item",
          "line": 74,
          "end_line": 81,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "_save_queue_item",
          "line": 83,
          "end_line": 87,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "get_queue_items",
          "line": 90,
          "end_line": 98,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "_get_queue_items_logic",
          "line": 100,
          "end_line": 114,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "_apply_queue_filters",
          "line": 116,
          "end_line": 123,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "pause_queue",
          "line": 128,
          "end_line": 130,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "_pause_queue_logic",
          "line": 132,
          "end_line": 146,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "resume_queue",
          "line": 149,
          "end_line": 151,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "_resume_queue_logic",
          "line": 153,
          "end_line": 162,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "stop_processing",
          "line": 178,
          "end_line": 183,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "_calculate_available_slots",
          "line": 213,
          "end_line": 215,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "_cleanup_completed_tasks",
          "line": 233,
          "end_line": 235,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "_cleanup_completed_tasks_logic",
          "line": 237,
          "end_line": 250,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "_get_analysis_and_file",
          "line": 274,
          "end_line": 284,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "_mark_analysis_started",
          "line": 286,
          "end_line": 289,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "_update_progress",
          "line": 341,
          "end_line": 345,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "_update_analysis_result",
          "line": 347,
          "end_line": 359,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "_mark_item_completed",
          "line": 361,
          "end_line": 369,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "clear_queue",
          "line": 386,
          "end_line": 388,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "_clear_queue_logic",
          "line": 390,
          "end_line": 400,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "retry_failed_items",
          "line": 403,
          "end_line": 405,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "_retry_failed_items_logic",
          "line": 407,
          "end_line": 427,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "get_queue_status",
          "line": 430,
          "end_line": 432,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "_get_queue_status_logic",
          "line": 434,
          "end_line": 465,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "delete_queue_item",
          "line": 468,
          "end_line": 470,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "_delete_queue_item_logic",
          "line": 472,
          "end_line": 482,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "get_queue_item_details",
          "line": 485,
          "end_line": 487,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "_get_queue_item_details_logic",
          "line": 489,
          "end_line": 524,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "update_analysis_provider_and_prompt",
          "line": 527,
          "end_line": 529,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "name": "_update_analysis_provider_and_prompt_logic",
          "line": 531,
          "end_line": 566,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\secure_streaming_service.py",
          "name": "validate_file_access",
          "line": 58,
          "end_line": 111,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\secure_streaming_service.py",
          "name": "get_file_info_secure",
          "line": 114,
          "end_line": 144,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\secure_streaming_service.py",
          "name": "stream_file_secure",
          "line": 147,
          "end_line": 209,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\secure_streaming_service.py",
          "name": "create_temp_access_token",
          "line": 212,
          "end_line": 246,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\secure_streaming_service.py",
          "name": "validate_temp_token",
          "line": 249,
          "end_line": 281,
          "is_async": false,
          "decorators": [
            "unknown"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\secure_streaming_service.py",
          "name": "_calculate_file_hash",
          "line": 283,
          "end_line": 293,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\secure_streaming_service.py",
          "name": "_is_streamable",
          "line": 295,
          "end_line": 298,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\secure_streaming_service.py",
          "name": "_is_downloadable",
          "line": 300,
          "end_line": 303,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\secure_streaming_service.py",
          "name": "_generate_security_headers",
          "line": 305,
          "end_line": 328,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\secure_streaming_service.py",
          "name": "_generate_temp_token",
          "line": 330,
          "end_line": 333,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\secure_streaming_service.py",
          "name": "_validate_session_token",
          "line": 335,
          "end_line": 346,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\secure_streaming_service.py",
          "name": "_cleanup_expired_tokens",
          "line": 348,
          "end_line": 360,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\secure_streaming_service.py",
          "name": "get_service_stats",
          "line": 362,
          "end_line": 371,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\streaming_service.py",
          "name": "_find_ffmpeg",
          "line": 35,
          "end_line": 62,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\streaming_service.py",
          "name": "is_streamable_format",
          "line": 64,
          "end_line": 67,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\streaming_service.py",
          "name": "get_media_type",
          "line": 69,
          "end_line": 76,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\streaming_service.py",
          "name": "get_output_format",
          "line": 78,
          "end_line": 93,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\streaming_service.py",
          "name": "get_ffmpeg_command",
          "line": 95,
          "end_line": 149,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\streaming_service.py",
          "name": "get_content_type",
          "line": 219,
          "end_line": 235,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\streaming_service.py",
          "name": "get_http_headers",
          "line": 237,
          "end_line": 253,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\video_converter_service.py",
          "name": "get_media_type",
          "line": 20,
          "end_line": 25,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\video_converter_service.py",
          "name": "is_format_web_optimized",
          "line": 27,
          "end_line": 48,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\video_converter_service.py",
          "name": "get_conversion_status",
          "line": 50,
          "end_line": 59,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\video_converter_service.py",
          "name": "start_conversion",
          "line": 61,
          "end_line": 125,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\video_converter_service.py",
          "name": "_convert_media",
          "line": 127,
          "end_line": 233,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\video_converter_service.py",
          "name": "_get_video_conversion_cmd",
          "line": 235,
          "end_line": 249,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\video_converter_service.py",
          "name": "_get_audio_conversion_cmd",
          "line": 251,
          "end_line": 263,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\video_converter_service.py",
          "name": "_get_media_duration",
          "line": 265,
          "end_line": 277,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\video_converter_service.py",
          "name": "get_converted_file_path",
          "line": 279,
          "end_line": 288,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\video_converter_service.py",
          "name": "cleanup_old_conversions",
          "line": 290,
          "end_line": 309,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\video_converter_service.py",
          "name": "convert_to_hls",
          "line": 311,
          "end_line": 405,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\services\\video_converter_service.py",
          "name": "_check_ffmpeg",
          "line": 407,
          "end_line": 422,
          "is_async": false,
          "decorators": [],
          "type": "function"
        },
        {
          "file": "backend\\app\\utils\\api_utils.py",
          "name": "handle_errors",
          "line": 25,
          "end_line": 39,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\utils\\api_utils.py",
          "name": "validate_file_path",
          "line": 42,
          "end_line": 65,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\utils\\api_utils.py",
          "name": "get_system_metrics",
          "line": 68,
          "end_line": 83,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\utils\\api_utils.py",
          "name": "record_api_metric",
          "line": 86,
          "end_line": 91,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\utils\\api_utils.py",
          "name": "monitor_api_performance",
          "line": 94,
          "end_line": 122,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\utils\\api_utils.py",
          "name": "validate_pagination_params",
          "line": 125,
          "end_line": 131,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\utils\\api_utils.py",
          "name": "validate_email_file",
          "line": 138,
          "end_line": 147,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\utils\\api_utils.py",
          "name": "validate_multimedia_file",
          "line": 150,
          "end_line": 165,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\utils\\api_utils.py",
          "name": "success_response",
          "line": 172,
          "end_line": 181,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\utils\\api_utils.py",
          "name": "error_response",
          "line": 184,
          "end_line": 193,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\utils\\api_utils.py",
          "name": "paginated_response",
          "line": 196,
          "end_line": 209,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\utils\\response_formatter.py",
          "name": "success_response",
          "line": 13,
          "end_line": 25,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        },
        {
          "file": "backend\\app\\utils\\response_formatter.py",
          "name": "error_response",
          "line": 28,
          "end_line": 40,
          "is_async": false,
          "decorators": [
            "staticmethod"
          ],
          "type": "function"
        }
      ],
      "dead_classes": [
        {
          "file": "backend\\app\\core\\database_utils.py",
          "name": "DatabaseUtils",
          "line": 17,
          "end_line": 56,
          "bases": [],
          "methods": [
            "safe_transaction",
            "bulk_operation",
            "safe_query"
          ],
          "type": "class"
        },
        {
          "file": "backend\\app\\core\\database_utils.py",
          "name": "QueryBuilder",
          "line": 59,
          "end_line": 84,
          "bases": [],
          "methods": [
            "build_file_filters",
            "build_pagination_query"
          ],
          "type": "class"
        },
        {
          "file": "backend\\app\\core\\database_utils.py",
          "name": "DatabaseValidator",
          "line": 87,
          "end_line": 100,
          "bases": [],
          "methods": [
            "validate_file_exists",
            "validate_directory_exists"
          ],
          "type": "class"
        },
        {
          "file": "backend\\app\\core\\file_utils.py",
          "name": "DirectoryInfoExtractor",
          "line": 51,
          "end_line": 72,
          "bases": [],
          "methods": [
            "extract_directory_info"
          ],
          "type": "class"
        },
        {
          "file": "backend\\app\\core\\file_utils.py",
          "name": "FilePathUtils",
          "line": 75,
          "end_line": 103,
          "bases": [],
          "methods": [
            "normalize_path",
            "is_subdirectory",
            "get_relative_path"
          ],
          "type": "class"
        },
        {
          "file": "backend\\app\\core\\status_manager.py",
          "name": "StatusAnalyzer",
          "line": 164,
          "end_line": 193,
          "bases": [],
          "methods": [
            "analyze_status",
            "get_status_statistics"
          ],
          "type": "class"
        },
        {
          "file": "backend\\app\\core\\types.py",
          "name": "ProviderType",
          "line": 40,
          "end_line": 44,
          "bases": [
            "str",
            "Enum"
          ],
          "methods": [],
          "type": "class"
        },
        {
          "file": "backend\\app\\core\\types.py",
          "name": "APIResponse",
          "line": 85,
          "end_line": 95,
          "bases": [],
          "methods": [
            "__init__"
          ],
          "type": "class"
        },
        {
          "file": "backend\\app\\core\\validation.py",
          "name": "DataValidator",
          "line": 42,
          "end_line": 140,
          "bases": [],
          "methods": [
            "validate_string",
            "validate_integer",
            "validate_path"
          ],
          "type": "class"
        },
        {
          "file": "backend\\app\\models\\analysis.py",
          "name": "AnalysisCreate",
          "line": 98,
          "end_line": 99,
          "bases": [
            "AnalysisBase"
          ],
          "methods": [],
          "type": "class"
        },
        {
          "file": "backend\\app\\models\\analysis.py",
          "name": "AnalysisListResponse",
          "line": 126,
          "end_line": 130,
          "bases": [
            "BaseModel"
          ],
          "methods": [],
          "type": "class"
        },
        {
          "file": "backend\\app\\models\\analysis.py",
          "name": "BulkAnalysisRequest",
          "line": 133,
          "end_line": 138,
          "bases": [
            "BaseModel"
          ],
          "methods": [],
          "type": "class"
        },
        {
          "file": "backend\\app\\models\\analysis.py",
          "name": "AnalysisComparisonRequest",
          "line": 141,
          "end_line": 145,
          "bases": [
            "BaseModel"
          ],
          "methods": [],
          "type": "class"
        },
        {
          "file": "backend\\app\\models\\config.py",
          "name": "ConfigListResponse",
          "line": 70,
          "end_line": 74,
          "bases": [
            "BaseModel"
          ],
          "methods": [],
          "type": "class"
        },
        {
          "file": "backend\\app\\models\\queue.py",
          "name": "QueueItemCreate",
          "line": 90,
          "end_line": 91,
          "bases": [
            "QueueItemBase"
          ],
          "methods": [],
          "type": "class"
        },
        {
          "file": "backend\\app\\models\\queue.py",
          "name": "QueueItemUpdate",
          "line": 94,
          "end_line": 105,
          "bases": [
            "BaseModel"
          ],
          "methods": [],
          "type": "class"
        },
        {
          "file": "backend\\app\\models\\queue.py",
          "name": "QueueListResponse",
          "line": 128,
          "end_line": 134,
          "bases": [
            "BaseModel"
          ],
          "methods": [],
          "type": "class"
        },
        {
          "file": "backend\\app\\models\\queue.py",
          "name": "QueueStatusResponse",
          "line": 137,
          "end_line": 145,
          "bases": [
            "BaseModel"
          ],
          "methods": [],
          "type": "class"
        },
        {
          "file": "backend\\app\\services\\base_service.py",
          "name": "ServiceErrorHandler",
          "line": 66,
          "end_line": 83,
          "bases": [],
          "methods": [
            "__init__",
            "handle_operation"
          ],
          "type": "class"
        }
      ],
      "recommendations": [
        "🚨 Code mort important détecté - nettoyage prioritaire recommandé",
        "Supprimer ou documenter les 429 fonctions non utilisées",
        "Supprimer ou documenter les 19 classes non utilisées",
        "Maintenir une analyse régulière du code mort pour optimiser la base de code"
      ]
    },
    "incomplete_implementation_detection": {
      "summary": {
        "total_files": 75,
        "total_issues": 103,
        "issues_by_severity": {
          "CRITICAL": 0,
          "HIGH": 0,
          "MEDIUM": 23,
          "LOW": 80
        },
        "completion_percentage": 50.0
      },
      "issues_by_type": {
        "ellipsis": [
          {
            "file": "error_monitor.py",
            "line": 51,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"🔍 Démarrage du moniteur d'erreurs...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "error_monitor.py",
            "line": 71,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"🚀 Démarrage du backend...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "error_monitor.py",
            "line": 91,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"🎨 Démarrage du frontend...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "error_monitor.py",
            "line": 177,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"🔌 Conflit de port détecté, arrêt des processus...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "error_monitor.py",
            "line": 187,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"✅ Processus arrêtés, redémarrage...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "error_monitor.py",
            "line": 200,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"🗄️ Erreur base de données détectée...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "error_monitor.py",
            "line": 214,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"📁 Fichier manquant détecté...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "error_monitor.py",
            "line": 226,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"📝 Erreur d'indentation détectée...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "error_monitor.py",
            "line": 232,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"🔤 Erreur de syntaxe détectée...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "error_monitor.py",
            "line": 237,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"🔢 Erreur de type détectée...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "error_monitor.py",
            "line": 242,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"🔗 Erreur d'attribut détectée...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "error_monitor.py",
            "line": 247,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"🔐 Erreur de permission détectée...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "error_monitor.py",
            "line": 267,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"❌ Backend arrêté, redémarrage...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "error_monitor.py",
            "line": 271,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"❌ Frontend arrêté, redémarrage...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "error_monitor.py",
            "line": 291,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"🧹 Arrêt du moniteur...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\generate_pdfs_for_existing_analyses.py",
            "line": 23,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"🔄 Génération des PDFs pour les analyses terminées existantes...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\generate_pdfs_for_existing_analyses.py",
            "line": 50,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(f\"📄 Génération du PDF pour l'analyse {analysis.id}...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\main.py",
            "line": 38,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "logger.info(\"[STARTUP] Starting DocuSense AI...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\main.py",
            "line": 58,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "logger.info(\"[MIGRATION] Migrating API keys to persistence system...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\main.py",
            "line": 113,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "logger.info(\"[SHUTDOWN] Shutting down DocuSense AI...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\migrate_add_pdf_path.py",
            "line": 21,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"🔄 Début de la migration: ajout de la colonne pdf_path...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\migrate_api_keys.py",
            "line": 56,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(f\"   ⚠️  Migration nécessaire...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\migrate_api_keys.py",
            "line": 66,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(f\"   ⚠️  Restauration nécessaire...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\migrate_api_keys.py",
            "line": 73,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(f\"   ⚠️  Conflit détecté, priorité à la base de données...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\emails.py",
            "line": 144,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "\"preview\": email_content.get('text_content', '')[:200] + \"...\" if len(email_content.get('text_content', '')) > 200 else email_content.get('text_content', '')",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\files.py",
            "line": 931,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "# Continuer avec la logique existante...",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\secure_streaming.py",
            "line": 220,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "logger.info(f\"Demande d'accès avec token temporaire: {temp_token[:8]}...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\analysis_creation.py",
            "line": 10,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...core.database import get_db",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\analysis_creation.py",
            "line": 11,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...services.analysis_service import AnalysisService",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\analysis_creation.py",
            "line": 12,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...services.ai_service import get_ai_service",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\analysis_creation.py",
            "line": 13,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...models.analysis import AnalysisType",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\analysis_creation.py",
            "line": 14,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...utils.api_utils import APIUtils, ResponseFormatter",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\analysis_creation.py",
            "line": 238,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...services.prompt_service import PromptService",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\analysis_creation.py",
            "line": 247,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...models.file import File",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\analysis_creation.py",
            "line": 341,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...models.file import File",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\analysis_creation.py",
            "line": 458,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...services.prompt_service import PromptService",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\analysis_management.py",
            "line": 11,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...core.database import get_db",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\analysis_management.py",
            "line": 12,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...services.analysis_service import AnalysisService",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\analysis_management.py",
            "line": 13,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...models.analysis import Analysis, AnalysisStatus",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\analysis_management.py",
            "line": 14,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...models.file import File",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\analysis_management.py",
            "line": 15,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...utils.api_utils import APIUtils, ResponseFormatter",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\analysis_management.py",
            "line": 228,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...services.prompt_service import PromptService",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\__init__.py",
            "line": 31,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...core.database import get_db",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 12,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...core.database import get_db",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 13,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...services.config_service import ConfigService",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 14,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...services.ai_service import get_ai_service",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 15,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...models.config import AIProvidersConfig",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 16,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...utils.api_utils import APIUtils, ResponseFormatter",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 67,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "provider: str = Query(..., description=\"Provider name\"),",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 68,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "status: str = Query(..., description=\"Provider status: valid, inactive\"),",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 93,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "provider: str = Query(..., description=\"Provider to test\"),",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 212,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "provider: str = Query(..., description=\"Provider name\"),",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 213,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "api_key: str = Body(..., embed=True),",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 234,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "provider: str = Query(..., description=\"Provider name\"),",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 235,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "api_key: str = Body(..., embed=True),",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 348,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "provider: str = Query(..., description=\"Provider name\"),",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 349,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "priority: int = Query(..., ge=1, description=\"Priority (1=highest, max=lowest)\"),",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 418,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "strategy: str = Query(..., description=\"Strategy: priority, cost, quality, speed\"),",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 434,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "provider: str = Query(..., description=\"Provider name\"),",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 435,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "model: str = Query(..., description=\"Model name\"),",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\general_config.py",
            "line": 10,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...core.database import get_db",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\general_config.py",
            "line": 11,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...services.config_service import ConfigService",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\general_config.py",
            "line": 12,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...models.config import ConfigCreate, ConfigUpdate",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\general_config.py",
            "line": 13,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...utils.api_utils import APIUtils, ResponseFormatter",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\__init__.py",
            "line": 22,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...core.database import get_db",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\__init__.py",
            "line": 23,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...services.config_service import ConfigService",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\__init__.py",
            "line": 24,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...models.config import UIConfig, SystemConfig",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\__init__.py",
            "line": 25,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...utils.api_utils import APIUtils, ResponseFormatter",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\core\\security.py",
            "line": 100,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "logger.info(f\"Connexion réussie, session créée: {session_token[:8]}...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\core\\security.py",
            "line": 127,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "logger.info(f\"Session fermée: {session_token[:8]}...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\core\\types.py",
            "line": 79,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "ServiceOperation = Callable[..., Any]",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\models\\config.py",
            "line": 40,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "key: str = Field(..., description=\"Configuration key\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\models\\config.py",
            "line": 41,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "value: str = Field(..., description=\"Configuration value\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\models\\config.py",
            "line": 46,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "category: str = Field(..., description=\"Configuration category\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\models\\config.py",
            "line": 81,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "provider: str = Field(..., description=\"AI provider name\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\models\\config.py",
            "line": 84,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "model: str = Field(..., description=\"Default model\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\models\\queue.py",
            "line": 84,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "analysis_id: int = Field(..., description=\"Analysis ID\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\models\\queue.py",
            "line": 150,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "action: str = Field(..., description=\"Action: clear, retry\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\services\\queue_service.py",
            "line": 322,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "self._update_progress(queue_item, 0.66, \"Analyse IA en cours...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\services\\queue_service.py",
            "line": 334,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "self._update_progress(queue_item, 0.95, \"Finalisation...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          }
        ],
        "pass_blocks": [
          {
            "file": "backend\\app\\api\\files.py",
            "line": 54,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*(?:#.*)?$",
            "context": "pass  # Drive not accessible",
            "line_content": "pass  # Drive not accessible",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\api\\files.py",
            "line": 63,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*(?:#.*)?$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\api\\files.py",
            "line": 63,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\core\\config.py",
            "line": 137,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*(?:#.*)?$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\core\\config.py",
            "line": 137,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\core\\config.py",
            "line": 173,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*(?:#.*)?$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\core\\config.py",
            "line": 173,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\models\\analysis.py",
            "line": 99,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*(?:#.*)?$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\models\\analysis.py",
            "line": 99,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\schemas\\file.py",
            "line": 27,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*(?:#.*)?$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\schemas\\file.py",
            "line": 27,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\services\\document_extractor_service.py",
            "line": 130,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*(?:#.*)?$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\services\\document_extractor_service.py",
            "line": 130,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\services\\document_extractor_service.py",
            "line": 139,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*(?:#.*)?$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\services\\document_extractor_service.py",
            "line": 139,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\services\\document_extractor_service.py",
            "line": 337,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*(?:#.*)?$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\services\\document_extractor_service.py",
            "line": 337,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\services\\document_extractor_service.py",
            "line": 346,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*(?:#.*)?$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\services\\document_extractor_service.py",
            "line": 346,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\services\\secure_streaming_service.py",
            "line": 98,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*(?:#.*)?$",
            "context": "pass  # Autoriser les fichiers temporaires pour les tests",
            "line_content": "pass  # Autoriser les fichiers temporaires pour les tests",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          }
        ],
        "placeholder_classes": [
          {
            "file": "backend\\app\\models\\analysis.py",
            "line": 98,
            "type": "placeholder_classes",
            "pattern": "empty_class",
            "context": "Classe 'AnalysisCreate' avec corps vide",
            "line_content": "class AnalysisCreate:",
            "severity": "MEDIUM",
            "description": "Classe avec implémentation placeholder"
          },
          {
            "file": "backend\\app\\schemas\\file.py",
            "line": 26,
            "type": "placeholder_classes",
            "pattern": "empty_class",
            "context": "Classe 'FileCreate' avec corps vide",
            "line_content": "class FileCreate:",
            "severity": "MEDIUM",
            "description": "Classe avec implémentation placeholder"
          }
        ],
        "todo": [
          {
            "file": "backend\\app\\services\\config_service.py",
            "line": 745,
            "type": "todo",
            "pattern": "#\\s*NOTE[:\\s]*(.+)",
            "context": "Plus de fallback sur les tests récents - l'utilisateur doit explicitement activer",
            "line_content": "# Note: Plus de fallback sur les tests récents - l'utilisateur doit explicitement activer",
            "severity": "MEDIUM",
            "description": "Commentaire TODO/FIXME indiquant du travail à faire"
          }
        ]
      },
      "issues_by_severity": {
        "CRITICAL": [],
        "HIGH": [],
        "MEDIUM": [
          {
            "file": "backend\\app\\api\\files.py",
            "line": 54,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*(?:#.*)?$",
            "context": "pass  # Drive not accessible",
            "line_content": "pass  # Drive not accessible",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\api\\files.py",
            "line": 63,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*(?:#.*)?$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\api\\files.py",
            "line": 63,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\core\\config.py",
            "line": 137,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*(?:#.*)?$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\core\\config.py",
            "line": 137,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\core\\config.py",
            "line": 173,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*(?:#.*)?$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\core\\config.py",
            "line": 173,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\models\\analysis.py",
            "line": 99,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*(?:#.*)?$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\models\\analysis.py",
            "line": 99,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\models\\analysis.py",
            "line": 98,
            "type": "placeholder_classes",
            "pattern": "empty_class",
            "context": "Classe 'AnalysisCreate' avec corps vide",
            "line_content": "class AnalysisCreate:",
            "severity": "MEDIUM",
            "description": "Classe avec implémentation placeholder"
          },
          {
            "file": "backend\\app\\schemas\\file.py",
            "line": 27,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*(?:#.*)?$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\schemas\\file.py",
            "line": 27,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\schemas\\file.py",
            "line": 26,
            "type": "placeholder_classes",
            "pattern": "empty_class",
            "context": "Classe 'FileCreate' avec corps vide",
            "line_content": "class FileCreate:",
            "severity": "MEDIUM",
            "description": "Classe avec implémentation placeholder"
          },
          {
            "file": "backend\\app\\services\\config_service.py",
            "line": 745,
            "type": "todo",
            "pattern": "#\\s*NOTE[:\\s]*(.+)",
            "context": "Plus de fallback sur les tests récents - l'utilisateur doit explicitement activer",
            "line_content": "# Note: Plus de fallback sur les tests récents - l'utilisateur doit explicitement activer",
            "severity": "MEDIUM",
            "description": "Commentaire TODO/FIXME indiquant du travail à faire"
          },
          {
            "file": "backend\\app\\services\\document_extractor_service.py",
            "line": 130,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*(?:#.*)?$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\services\\document_extractor_service.py",
            "line": 130,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\services\\document_extractor_service.py",
            "line": 139,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*(?:#.*)?$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\services\\document_extractor_service.py",
            "line": 139,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\services\\document_extractor_service.py",
            "line": 337,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*(?:#.*)?$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\services\\document_extractor_service.py",
            "line": 337,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\services\\document_extractor_service.py",
            "line": 346,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*(?:#.*)?$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\services\\document_extractor_service.py",
            "line": 346,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*$",
            "context": "pass",
            "line_content": "pass",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          },
          {
            "file": "backend\\app\\services\\secure_streaming_service.py",
            "line": 98,
            "type": "pass_blocks",
            "pattern": "^\\s*pass\\s*(?:#.*)?$",
            "context": "pass  # Autoriser les fichiers temporaires pour les tests",
            "line_content": "pass  # Autoriser les fichiers temporaires pour les tests",
            "severity": "MEDIUM",
            "description": "Bloc pass vide (implémentation manquante)"
          }
        ],
        "LOW": [
          {
            "file": "error_monitor.py",
            "line": 51,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"🔍 Démarrage du moniteur d'erreurs...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "error_monitor.py",
            "line": 71,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"🚀 Démarrage du backend...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "error_monitor.py",
            "line": 91,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"🎨 Démarrage du frontend...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "error_monitor.py",
            "line": 177,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"🔌 Conflit de port détecté, arrêt des processus...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "error_monitor.py",
            "line": 187,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"✅ Processus arrêtés, redémarrage...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "error_monitor.py",
            "line": 200,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"🗄️ Erreur base de données détectée...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "error_monitor.py",
            "line": 214,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"📁 Fichier manquant détecté...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "error_monitor.py",
            "line": 226,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"📝 Erreur d'indentation détectée...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "error_monitor.py",
            "line": 232,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"🔤 Erreur de syntaxe détectée...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "error_monitor.py",
            "line": 237,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"🔢 Erreur de type détectée...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "error_monitor.py",
            "line": 242,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"🔗 Erreur d'attribut détectée...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "error_monitor.py",
            "line": 247,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"🔐 Erreur de permission détectée...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "error_monitor.py",
            "line": 267,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"❌ Backend arrêté, redémarrage...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "error_monitor.py",
            "line": 271,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"❌ Frontend arrêté, redémarrage...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "error_monitor.py",
            "line": 291,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"🧹 Arrêt du moniteur...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\generate_pdfs_for_existing_analyses.py",
            "line": 23,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"🔄 Génération des PDFs pour les analyses terminées existantes...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\generate_pdfs_for_existing_analyses.py",
            "line": 50,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(f\"📄 Génération du PDF pour l'analyse {analysis.id}...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\main.py",
            "line": 38,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "logger.info(\"[STARTUP] Starting DocuSense AI...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\main.py",
            "line": 58,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "logger.info(\"[MIGRATION] Migrating API keys to persistence system...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\main.py",
            "line": 113,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "logger.info(\"[SHUTDOWN] Shutting down DocuSense AI...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\migrate_add_pdf_path.py",
            "line": 21,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(\"🔄 Début de la migration: ajout de la colonne pdf_path...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\migrate_api_keys.py",
            "line": 56,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(f\"   ⚠️  Migration nécessaire...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\migrate_api_keys.py",
            "line": 66,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(f\"   ⚠️  Restauration nécessaire...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\migrate_api_keys.py",
            "line": 73,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "print(f\"   ⚠️  Conflit détecté, priorité à la base de données...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\emails.py",
            "line": 144,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "\"preview\": email_content.get('text_content', '')[:200] + \"...\" if len(email_content.get('text_content', '')) > 200 else email_content.get('text_content', '')",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\files.py",
            "line": 931,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "# Continuer avec la logique existante...",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\secure_streaming.py",
            "line": 220,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "logger.info(f\"Demande d'accès avec token temporaire: {temp_token[:8]}...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\analysis_creation.py",
            "line": 10,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...core.database import get_db",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\analysis_creation.py",
            "line": 11,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...services.analysis_service import AnalysisService",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\analysis_creation.py",
            "line": 12,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...services.ai_service import get_ai_service",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\analysis_creation.py",
            "line": 13,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...models.analysis import AnalysisType",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\analysis_creation.py",
            "line": 14,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...utils.api_utils import APIUtils, ResponseFormatter",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\analysis_creation.py",
            "line": 238,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...services.prompt_service import PromptService",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\analysis_creation.py",
            "line": 247,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...models.file import File",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\analysis_creation.py",
            "line": 341,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...models.file import File",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\analysis_creation.py",
            "line": 458,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...services.prompt_service import PromptService",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\analysis_management.py",
            "line": 11,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...core.database import get_db",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\analysis_management.py",
            "line": 12,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...services.analysis_service import AnalysisService",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\analysis_management.py",
            "line": 13,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...models.analysis import Analysis, AnalysisStatus",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\analysis_management.py",
            "line": 14,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...models.file import File",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\analysis_management.py",
            "line": 15,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...utils.api_utils import APIUtils, ResponseFormatter",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\analysis_management.py",
            "line": 228,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...services.prompt_service import PromptService",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\analysis\\__init__.py",
            "line": 31,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...core.database import get_db",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 12,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...core.database import get_db",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 13,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...services.config_service import ConfigService",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 14,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...services.ai_service import get_ai_service",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 15,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...models.config import AIProvidersConfig",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 16,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...utils.api_utils import APIUtils, ResponseFormatter",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 67,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "provider: str = Query(..., description=\"Provider name\"),",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 68,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "status: str = Query(..., description=\"Provider status: valid, inactive\"),",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 93,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "provider: str = Query(..., description=\"Provider to test\"),",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 212,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "provider: str = Query(..., description=\"Provider name\"),",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 213,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "api_key: str = Body(..., embed=True),",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 234,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "provider: str = Query(..., description=\"Provider name\"),",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 235,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "api_key: str = Body(..., embed=True),",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 348,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "provider: str = Query(..., description=\"Provider name\"),",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 349,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "priority: int = Query(..., ge=1, description=\"Priority (1=highest, max=lowest)\"),",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 418,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "strategy: str = Query(..., description=\"Strategy: priority, cost, quality, speed\"),",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 434,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "provider: str = Query(..., description=\"Provider name\"),",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\ai_config.py",
            "line": 435,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "model: str = Query(..., description=\"Model name\"),",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\general_config.py",
            "line": 10,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...core.database import get_db",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\general_config.py",
            "line": 11,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...services.config_service import ConfigService",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\general_config.py",
            "line": 12,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...models.config import ConfigCreate, ConfigUpdate",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\general_config.py",
            "line": 13,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...utils.api_utils import APIUtils, ResponseFormatter",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\__init__.py",
            "line": 22,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...core.database import get_db",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\__init__.py",
            "line": 23,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...services.config_service import ConfigService",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\__init__.py",
            "line": 24,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...models.config import UIConfig, SystemConfig",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\api\\config\\__init__.py",
            "line": 25,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "from ...utils.api_utils import APIUtils, ResponseFormatter",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\core\\security.py",
            "line": 100,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "logger.info(f\"Connexion réussie, session créée: {session_token[:8]}...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\core\\security.py",
            "line": 127,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "logger.info(f\"Session fermée: {session_token[:8]}...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\core\\types.py",
            "line": 79,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "ServiceOperation = Callable[..., Any]",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\models\\config.py",
            "line": 40,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "key: str = Field(..., description=\"Configuration key\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\models\\config.py",
            "line": 41,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "value: str = Field(..., description=\"Configuration value\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\models\\config.py",
            "line": 46,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "category: str = Field(..., description=\"Configuration category\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\models\\config.py",
            "line": 81,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "provider: str = Field(..., description=\"AI provider name\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\models\\config.py",
            "line": 84,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "model: str = Field(..., description=\"Default model\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\models\\queue.py",
            "line": 84,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "analysis_id: int = Field(..., description=\"Analysis ID\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\models\\queue.py",
            "line": 150,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "action: str = Field(..., description=\"Action: clear, retry\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\services\\queue_service.py",
            "line": 322,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "self._update_progress(queue_item, 0.66, \"Analyse IA en cours...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          },
          {
            "file": "backend\\app\\services\\queue_service.py",
            "line": 334,
            "type": "ellipsis",
            "pattern": "\\.\\.\\.",
            "context": "...",
            "line_content": "self._update_progress(queue_item, 0.95, \"Finalisation...\")",
            "severity": "LOW",
            "description": "Ellipsis (...) indiquant du code manquant"
          }
        ]
      },
      "all_issues": [
        {
          "file": "error_monitor.py",
          "line": 51,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "print(\"🔍 Démarrage du moniteur d'erreurs...\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "error_monitor.py",
          "line": 71,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "print(\"🚀 Démarrage du backend...\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "error_monitor.py",
          "line": 91,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "print(\"🎨 Démarrage du frontend...\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "error_monitor.py",
          "line": 177,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "print(\"🔌 Conflit de port détecté, arrêt des processus...\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "error_monitor.py",
          "line": 187,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "print(\"✅ Processus arrêtés, redémarrage...\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "error_monitor.py",
          "line": 200,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "print(\"🗄️ Erreur base de données détectée...\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "error_monitor.py",
          "line": 214,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "print(\"📁 Fichier manquant détecté...\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "error_monitor.py",
          "line": 226,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "print(\"📝 Erreur d'indentation détectée...\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "error_monitor.py",
          "line": 232,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "print(\"🔤 Erreur de syntaxe détectée...\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "error_monitor.py",
          "line": 237,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "print(\"🔢 Erreur de type détectée...\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "error_monitor.py",
          "line": 242,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "print(\"🔗 Erreur d'attribut détectée...\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "error_monitor.py",
          "line": 247,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "print(\"🔐 Erreur de permission détectée...\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "error_monitor.py",
          "line": 267,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "print(\"❌ Backend arrêté, redémarrage...\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "error_monitor.py",
          "line": 271,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "print(\"❌ Frontend arrêté, redémarrage...\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "error_monitor.py",
          "line": 291,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "print(\"🧹 Arrêt du moniteur...\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\generate_pdfs_for_existing_analyses.py",
          "line": 23,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "print(\"🔄 Génération des PDFs pour les analyses terminées existantes...\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\generate_pdfs_for_existing_analyses.py",
          "line": 50,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "print(f\"📄 Génération du PDF pour l'analyse {analysis.id}...\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\main.py",
          "line": 38,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "logger.info(\"[STARTUP] Starting DocuSense AI...\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\main.py",
          "line": 58,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "logger.info(\"[MIGRATION] Migrating API keys to persistence system...\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\main.py",
          "line": 113,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "logger.info(\"[SHUTDOWN] Shutting down DocuSense AI...\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\migrate_add_pdf_path.py",
          "line": 21,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "print(\"🔄 Début de la migration: ajout de la colonne pdf_path...\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\migrate_api_keys.py",
          "line": 56,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "print(f\"   ⚠️  Migration nécessaire...\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\migrate_api_keys.py",
          "line": 66,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "print(f\"   ⚠️  Restauration nécessaire...\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\migrate_api_keys.py",
          "line": 73,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "print(f\"   ⚠️  Conflit détecté, priorité à la base de données...\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\emails.py",
          "line": 144,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "\"preview\": email_content.get('text_content', '')[:200] + \"...\" if len(email_content.get('text_content', '')) > 200 else email_content.get('text_content', '')",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\files.py",
          "line": 54,
          "type": "pass_blocks",
          "pattern": "^\\s*pass\\s*(?:#.*)?$",
          "context": "pass  # Drive not accessible",
          "line_content": "pass  # Drive not accessible",
          "severity": "MEDIUM",
          "description": "Bloc pass vide (implémentation manquante)"
        },
        {
          "file": "backend\\app\\api\\files.py",
          "line": 63,
          "type": "pass_blocks",
          "pattern": "^\\s*pass\\s*(?:#.*)?$",
          "context": "pass",
          "line_content": "pass",
          "severity": "MEDIUM",
          "description": "Bloc pass vide (implémentation manquante)"
        },
        {
          "file": "backend\\app\\api\\files.py",
          "line": 63,
          "type": "pass_blocks",
          "pattern": "^\\s*pass\\s*$",
          "context": "pass",
          "line_content": "pass",
          "severity": "MEDIUM",
          "description": "Bloc pass vide (implémentation manquante)"
        },
        {
          "file": "backend\\app\\api\\files.py",
          "line": 931,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "# Continuer avec la logique existante...",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\secure_streaming.py",
          "line": 220,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "logger.info(f\"Demande d'accès avec token temporaire: {temp_token[:8]}...\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\analysis\\analysis_creation.py",
          "line": 10,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "from ...core.database import get_db",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\analysis\\analysis_creation.py",
          "line": 11,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "from ...services.analysis_service import AnalysisService",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\analysis\\analysis_creation.py",
          "line": 12,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "from ...services.ai_service import get_ai_service",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\analysis\\analysis_creation.py",
          "line": 13,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "from ...models.analysis import AnalysisType",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\analysis\\analysis_creation.py",
          "line": 14,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "from ...utils.api_utils import APIUtils, ResponseFormatter",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\analysis\\analysis_creation.py",
          "line": 238,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "from ...services.prompt_service import PromptService",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\analysis\\analysis_creation.py",
          "line": 247,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "from ...models.file import File",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\analysis\\analysis_creation.py",
          "line": 341,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "from ...models.file import File",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\analysis\\analysis_creation.py",
          "line": 458,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "from ...services.prompt_service import PromptService",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\analysis\\analysis_management.py",
          "line": 11,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "from ...core.database import get_db",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\analysis\\analysis_management.py",
          "line": 12,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "from ...services.analysis_service import AnalysisService",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\analysis\\analysis_management.py",
          "line": 13,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "from ...models.analysis import Analysis, AnalysisStatus",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\analysis\\analysis_management.py",
          "line": 14,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "from ...models.file import File",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\analysis\\analysis_management.py",
          "line": 15,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "from ...utils.api_utils import APIUtils, ResponseFormatter",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\analysis\\analysis_management.py",
          "line": 228,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "from ...services.prompt_service import PromptService",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\analysis\\__init__.py",
          "line": 31,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "from ...core.database import get_db",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\config\\ai_config.py",
          "line": 12,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "from ...core.database import get_db",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\config\\ai_config.py",
          "line": 13,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "from ...services.config_service import ConfigService",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\config\\ai_config.py",
          "line": 14,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "from ...services.ai_service import get_ai_service",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\config\\ai_config.py",
          "line": 15,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "from ...models.config import AIProvidersConfig",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\config\\ai_config.py",
          "line": 16,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "from ...utils.api_utils import APIUtils, ResponseFormatter",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\config\\ai_config.py",
          "line": 67,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "provider: str = Query(..., description=\"Provider name\"),",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\config\\ai_config.py",
          "line": 68,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "status: str = Query(..., description=\"Provider status: valid, inactive\"),",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\config\\ai_config.py",
          "line": 93,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "provider: str = Query(..., description=\"Provider to test\"),",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\config\\ai_config.py",
          "line": 212,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "provider: str = Query(..., description=\"Provider name\"),",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\config\\ai_config.py",
          "line": 213,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "api_key: str = Body(..., embed=True),",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\config\\ai_config.py",
          "line": 234,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "provider: str = Query(..., description=\"Provider name\"),",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\config\\ai_config.py",
          "line": 235,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "api_key: str = Body(..., embed=True),",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\config\\ai_config.py",
          "line": 348,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "provider: str = Query(..., description=\"Provider name\"),",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\config\\ai_config.py",
          "line": 349,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "priority: int = Query(..., ge=1, description=\"Priority (1=highest, max=lowest)\"),",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\config\\ai_config.py",
          "line": 418,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "strategy: str = Query(..., description=\"Strategy: priority, cost, quality, speed\"),",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\config\\ai_config.py",
          "line": 434,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "provider: str = Query(..., description=\"Provider name\"),",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\config\\ai_config.py",
          "line": 435,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "model: str = Query(..., description=\"Model name\"),",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\config\\general_config.py",
          "line": 10,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "from ...core.database import get_db",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\config\\general_config.py",
          "line": 11,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "from ...services.config_service import ConfigService",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\config\\general_config.py",
          "line": 12,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "from ...models.config import ConfigCreate, ConfigUpdate",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\config\\general_config.py",
          "line": 13,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "from ...utils.api_utils import APIUtils, ResponseFormatter",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\config\\__init__.py",
          "line": 22,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "from ...core.database import get_db",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\config\\__init__.py",
          "line": 23,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "from ...services.config_service import ConfigService",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\config\\__init__.py",
          "line": 24,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "from ...models.config import UIConfig, SystemConfig",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\api\\config\\__init__.py",
          "line": 25,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "from ...utils.api_utils import APIUtils, ResponseFormatter",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\core\\config.py",
          "line": 137,
          "type": "pass_blocks",
          "pattern": "^\\s*pass\\s*(?:#.*)?$",
          "context": "pass",
          "line_content": "pass",
          "severity": "MEDIUM",
          "description": "Bloc pass vide (implémentation manquante)"
        },
        {
          "file": "backend\\app\\core\\config.py",
          "line": 137,
          "type": "pass_blocks",
          "pattern": "^\\s*pass\\s*$",
          "context": "pass",
          "line_content": "pass",
          "severity": "MEDIUM",
          "description": "Bloc pass vide (implémentation manquante)"
        },
        {
          "file": "backend\\app\\core\\config.py",
          "line": 173,
          "type": "pass_blocks",
          "pattern": "^\\s*pass\\s*(?:#.*)?$",
          "context": "pass",
          "line_content": "pass",
          "severity": "MEDIUM",
          "description": "Bloc pass vide (implémentation manquante)"
        },
        {
          "file": "backend\\app\\core\\config.py",
          "line": 173,
          "type": "pass_blocks",
          "pattern": "^\\s*pass\\s*$",
          "context": "pass",
          "line_content": "pass",
          "severity": "MEDIUM",
          "description": "Bloc pass vide (implémentation manquante)"
        },
        {
          "file": "backend\\app\\core\\security.py",
          "line": 100,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "logger.info(f\"Connexion réussie, session créée: {session_token[:8]}...\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\core\\security.py",
          "line": 127,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "logger.info(f\"Session fermée: {session_token[:8]}...\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\core\\types.py",
          "line": 79,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "ServiceOperation = Callable[..., Any]",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\models\\analysis.py",
          "line": 99,
          "type": "pass_blocks",
          "pattern": "^\\s*pass\\s*(?:#.*)?$",
          "context": "pass",
          "line_content": "pass",
          "severity": "MEDIUM",
          "description": "Bloc pass vide (implémentation manquante)"
        },
        {
          "file": "backend\\app\\models\\analysis.py",
          "line": 99,
          "type": "pass_blocks",
          "pattern": "^\\s*pass\\s*$",
          "context": "pass",
          "line_content": "pass",
          "severity": "MEDIUM",
          "description": "Bloc pass vide (implémentation manquante)"
        },
        {
          "file": "backend\\app\\models\\analysis.py",
          "line": 98,
          "type": "placeholder_classes",
          "pattern": "empty_class",
          "context": "Classe 'AnalysisCreate' avec corps vide",
          "line_content": "class AnalysisCreate:",
          "severity": "MEDIUM",
          "description": "Classe avec implémentation placeholder"
        },
        {
          "file": "backend\\app\\models\\config.py",
          "line": 40,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "key: str = Field(..., description=\"Configuration key\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\models\\config.py",
          "line": 41,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "value: str = Field(..., description=\"Configuration value\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\models\\config.py",
          "line": 46,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "category: str = Field(..., description=\"Configuration category\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\models\\config.py",
          "line": 81,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "provider: str = Field(..., description=\"AI provider name\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\models\\config.py",
          "line": 84,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "model: str = Field(..., description=\"Default model\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\models\\queue.py",
          "line": 84,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "analysis_id: int = Field(..., description=\"Analysis ID\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\models\\queue.py",
          "line": 150,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "action: str = Field(..., description=\"Action: clear, retry\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\schemas\\file.py",
          "line": 27,
          "type": "pass_blocks",
          "pattern": "^\\s*pass\\s*(?:#.*)?$",
          "context": "pass",
          "line_content": "pass",
          "severity": "MEDIUM",
          "description": "Bloc pass vide (implémentation manquante)"
        },
        {
          "file": "backend\\app\\schemas\\file.py",
          "line": 27,
          "type": "pass_blocks",
          "pattern": "^\\s*pass\\s*$",
          "context": "pass",
          "line_content": "pass",
          "severity": "MEDIUM",
          "description": "Bloc pass vide (implémentation manquante)"
        },
        {
          "file": "backend\\app\\schemas\\file.py",
          "line": 26,
          "type": "placeholder_classes",
          "pattern": "empty_class",
          "context": "Classe 'FileCreate' avec corps vide",
          "line_content": "class FileCreate:",
          "severity": "MEDIUM",
          "description": "Classe avec implémentation placeholder"
        },
        {
          "file": "backend\\app\\services\\config_service.py",
          "line": 745,
          "type": "todo",
          "pattern": "#\\s*NOTE[:\\s]*(.+)",
          "context": "Plus de fallback sur les tests récents - l'utilisateur doit explicitement activer",
          "line_content": "# Note: Plus de fallback sur les tests récents - l'utilisateur doit explicitement activer",
          "severity": "MEDIUM",
          "description": "Commentaire TODO/FIXME indiquant du travail à faire"
        },
        {
          "file": "backend\\app\\services\\document_extractor_service.py",
          "line": 130,
          "type": "pass_blocks",
          "pattern": "^\\s*pass\\s*(?:#.*)?$",
          "context": "pass",
          "line_content": "pass",
          "severity": "MEDIUM",
          "description": "Bloc pass vide (implémentation manquante)"
        },
        {
          "file": "backend\\app\\services\\document_extractor_service.py",
          "line": 130,
          "type": "pass_blocks",
          "pattern": "^\\s*pass\\s*$",
          "context": "pass",
          "line_content": "pass",
          "severity": "MEDIUM",
          "description": "Bloc pass vide (implémentation manquante)"
        },
        {
          "file": "backend\\app\\services\\document_extractor_service.py",
          "line": 139,
          "type": "pass_blocks",
          "pattern": "^\\s*pass\\s*(?:#.*)?$",
          "context": "pass",
          "line_content": "pass",
          "severity": "MEDIUM",
          "description": "Bloc pass vide (implémentation manquante)"
        },
        {
          "file": "backend\\app\\services\\document_extractor_service.py",
          "line": 139,
          "type": "pass_blocks",
          "pattern": "^\\s*pass\\s*$",
          "context": "pass",
          "line_content": "pass",
          "severity": "MEDIUM",
          "description": "Bloc pass vide (implémentation manquante)"
        },
        {
          "file": "backend\\app\\services\\document_extractor_service.py",
          "line": 337,
          "type": "pass_blocks",
          "pattern": "^\\s*pass\\s*(?:#.*)?$",
          "context": "pass",
          "line_content": "pass",
          "severity": "MEDIUM",
          "description": "Bloc pass vide (implémentation manquante)"
        },
        {
          "file": "backend\\app\\services\\document_extractor_service.py",
          "line": 337,
          "type": "pass_blocks",
          "pattern": "^\\s*pass\\s*$",
          "context": "pass",
          "line_content": "pass",
          "severity": "MEDIUM",
          "description": "Bloc pass vide (implémentation manquante)"
        },
        {
          "file": "backend\\app\\services\\document_extractor_service.py",
          "line": 346,
          "type": "pass_blocks",
          "pattern": "^\\s*pass\\s*(?:#.*)?$",
          "context": "pass",
          "line_content": "pass",
          "severity": "MEDIUM",
          "description": "Bloc pass vide (implémentation manquante)"
        },
        {
          "file": "backend\\app\\services\\document_extractor_service.py",
          "line": 346,
          "type": "pass_blocks",
          "pattern": "^\\s*pass\\s*$",
          "context": "pass",
          "line_content": "pass",
          "severity": "MEDIUM",
          "description": "Bloc pass vide (implémentation manquante)"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "line": 322,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "self._update_progress(queue_item, 0.66, \"Analyse IA en cours...\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\services\\queue_service.py",
          "line": 334,
          "type": "ellipsis",
          "pattern": "\\.\\.\\.",
          "context": "...",
          "line_content": "self._update_progress(queue_item, 0.95, \"Finalisation...\")",
          "severity": "LOW",
          "description": "Ellipsis (...) indiquant du code manquant"
        },
        {
          "file": "backend\\app\\services\\secure_streaming_service.py",
          "line": 98,
          "type": "pass_blocks",
          "pattern": "^\\s*pass\\s*(?:#.*)?$",
          "context": "pass  # Autoriser les fichiers temporaires pour les tests",
          "line_content": "pass  # Autoriser les fichiers temporaires pour les tests",
          "severity": "MEDIUM",
          "description": "Bloc pass vide (implémentation manquante)"
        }
      ],
      "recommendations": [
        "Implémenter les 103 fonctionnalités manquantes identifiées",
        "Traiter les 1 commentaires TODO/FIXME identifiés",
        "Remplacer les 20 blocs pass par des implémentations",
        "Mettre en place un processus de revue de code pour éviter les implémentations incomplètes",
        "Documenter les fonctionnalités en cours de développement"
      ]
    },
    "quality_analysis": {
      "quality_score": 100,
      "metrics": {
        "total_files": 10477,
        "total_lines": 18640,
        "total_functions": 528,
        "total_classes": 110,
        "average_function_length": 16.115530303030305,
        "average_class_length": 97.80909090909091,
        "complexity_score": 0.19513219433043813
      },
      "improvements": []
    }
  },
  "recommendations": [
    "Corriger les vulnérabilités de sécurité identifiées",
    "Refactoriser le code dupliqué pour améliorer la maintenabilité",
    "Supprimer ou documenter le code mort (429 fonctions, 19 classes)",
    "Compléter les 103 implémentations manquantes identifiées"
  ]
}