#!/usr/bin/env python3
"""
Test des providers AI pour DocuSense AI
=======================================

Teste la connectivit√© et la validit√© des cl√©s API pour tous les providers AI configur√©s.
"""

import asyncio
import sys
import os
import requests
from pathlib import Path
from typing import Dict, Any

# Ajouter le r√©pertoire backend au path
project_path = Path(__file__).parent.parent.parent.parent
backend_path = project_path / "backend"
sys.path.insert(0, str(backend_path))

async def run_test(project_path: Path, config: Dict[str, Any]) -> Dict[str, Any]:
    """Ex√©cute le test des providers AI."""
    
    print("üß™ Test des providers AI...")
    
    results = {
        "success": True,
        "message": "Tous les providers AI test√©s avec succ√®s",
        "details": {
            "providers_tested": 0,
            "providers_successful": 0,
            "providers_failed": 0,
            "provider_results": {}
        }
    }
    
    # V√©rifier si le backend est en cours d'ex√©cution
    backend_url = "http://localhost:8000"
    try:
        response = requests.get(f"{backend_url}/api/health", timeout=5)
        if response.status_code != 200:
            return {
                "success": False,
                "message": "Backend non accessible - impossible de tester les providers AI",
                "details": {"error": "Backend offline"}
            }
    except Exception as e:
        return {
            "success": False,
            "message": f"Impossible de se connecter au backend: {str(e)}",
            "details": {"error": str(e)}
        }
    
    # R√©cup√©rer la configuration des providers AI
    ai_providers = config.get("ai_providers", {})
    
    for provider_name, provider_config in ai_providers.items():
        print(f"  üîç Test du provider: {provider_name}")
        
        test_key = provider_config.get("test_key")
        required = provider_config.get("required", False)
        
        if not test_key and not required:
            print(f"    ‚ö™ Provider {provider_name} non configur√© (non requis)")
            results["details"]["provider_results"][provider_name] = {
                "status": "skipped",
                "message": "Provider non configur√© et non requis"
            }
            continue
        
        if not test_key and required:
            print(f"    ‚ùå Provider {provider_name} requis mais non configur√©")
            results["details"]["provider_results"][provider_name] = {
                "status": "failed",
                "message": "Provider requis mais cl√© API manquante"
            }
            results["details"]["providers_failed"] += 1
            results["success"] = False
            continue
        
        # Tester le provider avec sa cl√© API
        try:
            test_url = f"{backend_url}/api/config/ai/test"
            test_data = {"api_key": test_key}
            test_params = {"provider": provider_name}
            
            response = requests.post(
                test_url,
                params=test_params,
                json=test_data,
                timeout=30
            )
            
            if response.status_code == 200:
                response_data = response.json()
                if response_data.get("success", False):
                    print(f"    ‚úÖ Provider {provider_name} test√© avec succ√®s")
                    results["details"]["provider_results"][provider_name] = {
                        "status": "success",
                        "message": "Provider fonctionnel",
                        "response": response_data
                    }
                    results["details"]["providers_successful"] += 1
                else:
                    print(f"    ‚ùå Provider {provider_name} test √©chou√©")
                    results["details"]["provider_results"][provider_name] = {
                        "status": "failed",
                        "message": response_data.get("message", "Test √©chou√©"),
                        "response": response_data
                    }
                    results["details"]["providers_failed"] += 1
                    results["success"] = False
            else:
                print(f"    ‚ùå Erreur HTTP {response.status_code} pour {provider_name}")
                results["details"]["provider_results"][provider_name] = {
                    "status": "failed",
                    "message": f"Erreur HTTP {response.status_code}",
                    "response": response.text
                }
                results["details"]["providers_failed"] += 1
                results["success"] = False
                
        except Exception as e:
            print(f"    ‚ùå Erreur lors du test de {provider_name}: {str(e)}")
            results["details"]["provider_results"][provider_name] = {
                "status": "failed",
                "message": f"Erreur de connexion: {str(e)}"
            }
            results["details"]["providers_failed"] += 1
            results["success"] = False
        
        results["details"]["providers_tested"] += 1
    
    # Mettre √† jour le message de r√©sultat
    if results["details"]["providers_failed"] > 0:
        results["message"] = f"{results['details']['providers_failed']} provider(s) AI en √©chec"
    elif results["details"]["providers_successful"] > 0:
        results["message"] = f"{results['details']['providers_successful']} provider(s) AI test√©(s) avec succ√®s"
    else:
        results["message"] = "Aucun provider AI test√©"
    
    return results
