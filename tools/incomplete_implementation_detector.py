#!/usr/bin/env python3
"""
INCOMPLETE IMPLEMENTATION DETECTOR - AUDIT DOCUSENSE AI
======================================================

D√©tecte les impl√©mentations incompl√®tes dans le code (TODO, NotImplementedError, 
blocs pass, etc.) pour identifier les fonctionnalit√©s non termin√©es.
"""

import os
import ast
import re
from pathlib import Path
from typing import Dict, List, Any

class IncompleteImplementationDetector:
    """D√©tecteur d'impl√©mentations incompl√®tes."""
    
    def __init__(self, project_dir: Path, audit_dir: Path):
        self.project_dir = project_dir
        self.audit_dir = audit_dir
        self.excluded_patterns = [
            r'__pycache__',
            r'\.git',
            r'\.venv',
            r'venv',
            r'node_modules',
            r'\.pytest_cache',
            r'codemort',
            r'audit',
            r'\.backup',
            r'\.log',
            r'tests?/',
            r'test_',
            r'_test\.py$'
        ]
        
        # Patterns pour d√©tecter les impl√©mentations incompl√®tes
        self.incomplete_patterns = {
            'todo': {
                'patterns': [
                    r'#\s*TODO[:\s]*(.+)',
                    r'#\s*FIXME[:\s]*(.+)',
                    r'#\s*HACK[:\s]*(.+)',
                    r'#\s*XXX[:\s]*(.+)',
                    r'#\s*NOTE[:\s]*(.+)',
                ],
                'severity': 'MEDIUM',
                'description': 'Commentaire TODO/FIXME indiquant du travail √† faire'
            },
            'not_implemented': {
                'patterns': [
                    r'NotImplementedError',
                    r'raise\s+NotImplementedError',
                    r'raise\s+NotImplemented',
                ],
                'severity': 'HIGH',
                'description': 'Exception NotImplementedError lev√©e'
            },
            'pass_blocks': {
                'patterns': [
                    r'^\s*pass\s*(?:#.*)?$',
                    r'^\s*pass\s*$',
                ],
                'severity': 'MEDIUM',
                'description': 'Bloc pass vide (impl√©mentation manquante)'
            },
            'ellipsis': {
                'patterns': [
                    r'\.\.\.',
                    r'Ellipsis',
                ],
                'severity': 'LOW',
                'description': 'Ellipsis (...) indiquant du code manquant'
            },
            'placeholder_functions': {
                'patterns': [
                    r'def\s+\w+\s*\([^)]*\)\s*:\s*(?:pass|\.\.\.|raise\s+NotImplementedError)',
                    r'async\s+def\s+\w+\s*\([^)]*\)\s*:\s*(?:pass|\.\.\.|raise\s+NotImplementedError)',
                ],
                'severity': 'HIGH',
                'description': 'Fonction avec impl√©mentation placeholder'
            },
            'placeholder_classes': {
                'patterns': [
                    r'class\s+\w+\s*\([^)]*\)\s*:\s*(?:pass|\.\.\.)',
                    r'class\s+\w+\s*:\s*(?:pass|\.\.\.)',
                ],
                'severity': 'MEDIUM',
                'description': 'Classe avec impl√©mentation placeholder'
            },
            'unimplemented_methods': {
                'patterns': [
                    r'def\s+\w+\s*\([^)]*\)\s*:\s*(?:pass|\.\.\.|raise\s+NotImplementedError)',
                ],
                'severity': 'MEDIUM',
                'description': 'M√©thode avec impl√©mentation placeholder'
            }
        }
    
    def is_excluded_file(self, file_path: Path) -> bool:
        """V√©rifie si un fichier doit √™tre exclu de l'analyse."""
        file_str = str(file_path)
        
        for pattern in self.excluded_patterns:
            if re.search(pattern, file_str, re.IGNORECASE):
                return True
        
        return False
    
    def analyze_project(self) -> Dict[str, Any]:
        """Analyse compl√®te du projet pour d√©tecter les impl√©mentations incompl√®tes."""
        print("üîç Analyse des impl√©mentations incompl√®tes en cours...")
        
        # Collecter tous les fichiers Python
        python_files = []
        for root, dirs, files in os.walk(self.project_dir):
            # Filtrer les dossiers exclus
            dirs[:] = [d for d in dirs if not self.is_excluded_file(Path(root) / d)]
            
            for file in files:
                if file.endswith('.py'):
                    file_path = Path(root) / file
                    if not self.is_excluded_file(file_path):
                        python_files.append(file_path)
        
        print(f"  üìÅ {len(python_files)} fichiers Python analys√©s")
        
        # Analyser chaque fichier
        all_issues = []
        for file_path in python_files:
            try:
                issues = self._analyze_file(file_path)
                all_issues.extend(issues)
            except Exception as e:
                print(f"  ‚ö†Ô∏è Erreur analyse {file_path}: {e}")
        
        # Grouper par type et s√©v√©rit√©
        grouped_issues = self._group_issues(all_issues)
        
        results = {
            'total_files': len(python_files),
            'total_issues': len(all_issues),
            'issues_by_type': grouped_issues,
            'issues_by_severity': self._group_by_severity(all_issues),
            'all_issues': all_issues
        }
        
        print(f"  ‚ö†Ô∏è {len(all_issues)} impl√©mentations incompl√®tes d√©tect√©es")
        
        return results
    
    def _analyze_file(self, file_path: Path) -> List[Dict[str, Any]]:
        """Analyse un fichier pour d√©tecter les impl√©mentations incompl√®tes."""
        issues = []
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            lines = content.split('\n')
            relative_path = file_path.relative_to(self.project_dir)
            
            # Analyser chaque ligne
            for line_num, line in enumerate(lines, 1):
                line_issues = self._analyze_line(line, line_num, relative_path)
                issues.extend(line_issues)
            
            # Analyser la structure AST pour les patterns complexes
            ast_issues = self._analyze_ast_structure(file_path, content)
            issues.extend(ast_issues)
            
        except Exception as e:
            print(f"  ‚ö†Ô∏è Erreur lecture {file_path}: {e}")
        
        return issues
    
    def _analyze_line(self, line: str, line_num: int, file_path: Path) -> List[Dict[str, Any]]:
        """Analyse une ligne pour d√©tecter les patterns d'impl√©mentation incompl√®te."""
        issues = []
        
        for issue_type, config in self.incomplete_patterns.items():
            for pattern in config['patterns']:
                matches = re.finditer(pattern, line, re.IGNORECASE | re.MULTILINE)
                
                for match in matches:
                    # Extraire le contexte
                    context = match.group(1) if len(match.groups()) > 0 else match.group(0)
                    
                    issues.append({
                        'file': str(file_path),
                        'line': line_num,
                        'type': issue_type,
                        'pattern': pattern,
                        'context': context.strip() if context else '',
                        'line_content': line.strip(),
                        'severity': config['severity'],
                        'description': config['description']
                    })
        
        return issues
    
    def _analyze_ast_structure(self, file_path: Path, content: str) -> List[Dict[str, Any]]:
        """Analyse la structure AST pour d√©tecter les patterns complexes."""
        issues = []
        
        try:
            tree = ast.parse(content)
            relative_path = file_path.relative_to(self.project_dir)
            
            for node in ast.walk(tree):
                if isinstance(node, ast.FunctionDef):
                    # V√©rifier si la fonction a un corps vide ou placeholder
                    if self._is_empty_function(node):
                        issues.append({
                            'file': str(relative_path),
                            'line': node.lineno,
                            'type': 'placeholder_functions',
                            'pattern': 'empty_function',
                            'context': f"Fonction '{node.name}' avec corps vide",
                            'line_content': f"def {node.name}(...):",
                            'severity': 'HIGH',
                            'description': 'Fonction avec impl√©mentation placeholder'
                        })
                
                elif isinstance(node, ast.ClassDef):
                    # V√©rifier si la classe a un corps vide
                    if self._is_empty_class(node):
                        issues.append({
                            'file': str(relative_path),
                            'line': node.lineno,
                            'type': 'placeholder_classes',
                            'pattern': 'empty_class',
                            'context': f"Classe '{node.name}' avec corps vide",
                            'line_content': f"class {node.name}:",
                            'severity': 'MEDIUM',
                            'description': 'Classe avec impl√©mentation placeholder'
                        })
                
                elif isinstance(node, ast.Raise):
                    # V√©rifier les NotImplementedError
                    if self._is_not_implemented_error(node):
                        issues.append({
                            'file': str(relative_path),
                            'line': node.lineno,
                            'type': 'not_implemented',
                            'pattern': 'NotImplementedError',
                            'context': 'Exception NotImplementedError lev√©e',
                            'line_content': ast.unparse(node),
                            'severity': 'HIGH',
                            'description': 'Exception NotImplementedError lev√©e'
                        })
        
        except Exception as e:
            print(f"  ‚ö†Ô∏è Erreur AST {file_path}: {e}")
        
        return issues
    
    def _is_empty_function(self, node: ast.FunctionDef) -> bool:
        """V√©rifie si une fonction a un corps vide ou placeholder."""
        if not node.body:
            return True
        
        # V√©rifier si le corps ne contient que 'pass' ou '...'
        if len(node.body) == 1:
            stmt = node.body[0]
            if isinstance(stmt, ast.Pass):
                return True
            elif isinstance(stmt, ast.Expr) and isinstance(stmt.value, ast.Constant):
                if stmt.value.value == Ellipsis:
                    return True
        
        return False
    
    def _is_empty_class(self, node: ast.ClassDef) -> bool:
        """V√©rifie si une classe a un corps vide."""
        if not node.body:
            return True
        
        # V√©rifier si le corps ne contient que 'pass' ou '...'
        if len(node.body) == 1:
            stmt = node.body[0]
            if isinstance(stmt, ast.Pass):
                return True
            elif isinstance(stmt, ast.Expr) and isinstance(stmt.value, ast.Constant):
                if stmt.value.value == Ellipsis:
                    return True
        
        return False
    
    def _is_not_implemented_error(self, node: ast.Raise) -> bool:
        """V√©rifie si une exception lev√©e est NotImplementedError."""
        if node.exc:
            if isinstance(node.exc, ast.Name):
                return node.exc.id == 'NotImplementedError'
            elif isinstance(node.exc, ast.Call):
                if isinstance(node.exc.func, ast.Name):
                    return node.exc.func.id == 'NotImplementedError'
        
        return False
    
    def _group_issues(self, issues: List[Dict[str, Any]]) -> Dict[str, List[Dict[str, Any]]]:
        """Groupe les probl√®mes par type."""
        grouped = {}
        
        for issue in issues:
            issue_type = issue['type']
            if issue_type not in grouped:
                grouped[issue_type] = []
            grouped[issue_type].append(issue)
        
        return grouped
    
    def _group_by_severity(self, issues: List[Dict[str, Any]]) -> Dict[str, List[Dict[str, Any]]]:
        """Groupe les probl√®mes par s√©v√©rit√©."""
        grouped = {
            'CRITICAL': [],
            'HIGH': [],
            'MEDIUM': [],
            'LOW': []
        }
        
        for issue in issues:
            severity = issue['severity']
            if severity in grouped:
                grouped[severity].append(issue)
        
        return grouped
    
    def generate_incomplete_implementation_report(self, results: Dict[str, Any]) -> Dict[str, Any]:
        """G√©n√®re un rapport d√©taill√© des impl√©mentations incompl√®tes."""
        return {
            'summary': {
                'total_files': results['total_files'],
                'total_issues': results['total_issues'],
                'issues_by_severity': {
                    severity: len(issues) for severity, issues in results['issues_by_severity'].items()
                },
                'completion_percentage': self._calculate_completion_percentage(results)
            },
            'issues_by_type': results['issues_by_type'],
            'issues_by_severity': results['issues_by_severity'],
            'all_issues': results['all_issues'],
            'recommendations': self._generate_incomplete_implementation_recommendations(results)
        }
    
    def _calculate_completion_percentage(self, results: Dict[str, Any]) -> float:
        """Calcule le pourcentage de compl√©tion du projet."""
        # Estimation bas√©e sur le nombre d'issues
        total_issues = results['total_issues']
        
        if total_issues == 0:
            return 100.0
        elif total_issues <= 5:
            return 95.0
        elif total_issues <= 15:
            return 85.0
        elif total_issues <= 30:
            return 70.0
        else:
            return max(50.0, 100.0 - (total_issues * 2))
    
    def _generate_incomplete_implementation_recommendations(self, results: Dict[str, Any]) -> List[str]:
        """G√©n√®re des recommandations pour les impl√©mentations incompl√®tes."""
        recommendations = []
        
        total_issues = results['total_issues']
        high_issues = len(results['issues_by_severity']['HIGH'])
        critical_issues = len(results['issues_by_severity']['CRITICAL'])
        
        if total_issues == 0:
            recommendations.append("‚úÖ Aucune impl√©mentation incompl√®te d√©tect√©e - excellent travail !")
        else:
            if critical_issues > 0:
                recommendations.append(f"üö® {critical_issues} probl√®mes critiques d√©tect√©s - correction prioritaire requise")
            
            if high_issues > 0:
                recommendations.append(f"‚ö†Ô∏è {high_issues} impl√©mentations importantes manquantes - planifier leur d√©veloppement")
            
            recommendations.append(f"Impl√©menter les {total_issues} fonctionnalit√©s manquantes identifi√©es")
        
        # Recommandations sp√©cifiques par type
        issues_by_type = results['issues_by_type']
        
        if 'todo' in issues_by_type:
            todo_count = len(issues_by_type['todo'])
            recommendations.append(f"Traiter les {todo_count} commentaires TODO/FIXME identifi√©s")
        
        if 'not_implemented' in issues_by_type:
            ni_count = len(issues_by_type['not_implemented'])
            recommendations.append(f"Impl√©menter les {ni_count} fonctions avec NotImplementedError")
        
        if 'pass_blocks' in issues_by_type:
            pass_count = len(issues_by_type['pass_blocks'])
            recommendations.append(f"Remplacer les {pass_count} blocs pass par des impl√©mentations")
        
        recommendations.append("Mettre en place un processus de revue de code pour √©viter les impl√©mentations incompl√®tes")
        recommendations.append("Documenter les fonctionnalit√©s en cours de d√©veloppement")
        
        return recommendations

