#!/usr/bin/env python3
"""
Test de d√©tection des subprocess pour comprendre les faux positifs
"""

import re

# Exemple de code s√©curis√© (bonne pratique)
secure_code = '''
subprocess.run([
    str(self.backend_path / "venv" / "Scripts" / "python.exe"), "main.py"
], cwd=self.backend_path, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

subprocess.run(["npm", "run", "dev"], cwd=self.frontend_path)

subprocess.run(["explorer", str(path)], check=True)

subprocess.run(["wmic", "logicaldisk", "where", f"DeviceID='{drive_letter}:'"])
'''

# Patterns de d√©tection
patterns = [
    r'subprocess\.run\s*\(\s*[^)]*\+\s*[^)]*\)',
    r'subprocess\.Popen\s*\(\s*[^)]*\+\s*[^)]*\)',
]

# Patterns d'exclusion
exclusions = [
    r'subprocess\.run\s*\(\s*\[[^\]]+\]',
    r'subprocess\.Popen\s*\(\s*\[[^\]]+\]',
    r'subprocess\.run\s*\(\s*\[[^\]]+\],\s*cwd=',
    r'subprocess\.Popen\s*\(\s*\[[^\]]+\],\s*cwd=',
    r'subprocess\.run\s*\(\s*\[["\'](?:npm|pip|python|wmic|explorer|open|xdg-open)["\']',
    r'subprocess\.Popen\s*\(\s*\[["\'](?:npm|pip|python|wmic|explorer|open|xdg-open)["\']',
]

print("üîç TEST DE D√âTECTION SUBPROCESS")
print("=" * 50)

print("\nüìã Code s√©curis√© √† tester:")
print(secure_code)

print("\nüîç D√©tection avec patterns:")
for i, pattern in enumerate(patterns, 1):
    matches = re.findall(pattern, secure_code)
    print(f"Pattern {i}: {pattern}")
    print(f"  Matches: {matches}")
    print()

print("\nüö´ V√©rification des exclusions:")
for i, exclusion in enumerate(exclusions, 1):
    matches = re.findall(exclusion, secure_code)
    print(f"Exclusion {i}: {exclusion}")
    print(f"  Matches: {matches}")
    print()

# Test de logique combin√©e
print("\nüéØ LOGIQUE COMBIN√âE:")
for line in secure_code.split('\n'):
    if 'subprocess' in line:
        print(f"\nLigne: {line.strip()}")
        
        # V√©rifier si c'est d√©tect√© comme vuln√©rabilit√©
        is_vulnerable = False
        for pattern in patterns:
            if re.search(pattern, line):
                is_vulnerable = True
                print(f"  ‚ùå D√©tect√© comme vuln√©rabilit√© par: {pattern}")
                break
        
        # V√©rifier si c'est exclu
        is_excluded = False
        for exclusion in exclusions:
            if re.search(exclusion, line):
                is_excluded = True
                print(f"  ‚úÖ Exclu par: {exclusion}")
                break
        
        if not is_vulnerable:
            print(f"  ‚úÖ Pas d√©tect√© comme vuln√©rabilit√©")
        elif is_excluded:
            print(f"  ‚úÖ Vuln√©rabilit√© exclue (faux positif)")
        else:
            print(f"  ‚ùå Vraie vuln√©rabilit√© d√©tect√©e")

