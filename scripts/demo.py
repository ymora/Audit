#!/usr/bin/env python3
"""
D√âMONSTRATION - SYST√àME D'AUDIT UNIVERSEL
========================================

Script de d√©monstration pour pr√©senter les fonctionnalit√©s du syst√®me d'audit universel.
"""

import subprocess
import sys
import time
from pathlib import Path

def print_header(title):
    """Affiche un en-t√™te stylis√©."""
    print("\n" + "=" * 60)
    print(f"üîç {title}")
    print("=" * 60)

def print_step(step, description):
    """Affiche une √©tape de la d√©monstration."""
    print(f"\nüìã √âtape {step}: {description}")
    print("-" * 40)

def run_command(command, description=""):
    """Ex√©cute une commande et affiche le r√©sultat."""
    print(f"‚ö° {description}")
    print(f"Commande: {command}")
    
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Succ√®s")
            if result.stdout.strip():
                print("Sortie:")
                print(result.stdout.strip())
        else:
            print("‚ùå Erreur")
            if result.stderr.strip():
                print("Erreur:")
                print(result.stderr.strip())
        return result.returncode == 0
    except Exception as e:
        print(f"‚ùå Exception: {e}")
        return False

def demo_interface_graphique():
    """D√©monstration de l'interface graphique."""
    print_header("Interface Graphique")
    
    print("üéØ Fonctionnalit√©s de l'interface graphique:")
    print("‚Ä¢ S√©lection de projet via dialogue de fichiers")
    print("‚Ä¢ Lancement d'audit en un clic")
    print("‚Ä¢ Ouverture automatique des rapports HTML")
    print("‚Ä¢ Gestion des projets r√©cents")
    print("‚Ä¢ Logs en temps r√©el")
    print("‚Ä¢ Barre de progression")
    
    print("\nüöÄ Lancement de l'interface...")
    print("üí° L'interface va s'ouvrir dans une nouvelle fen√™tre.")
    print("   Vous pourrez tester toutes les fonctionnalit√©s.")
    
    response = input("\nVoulez-vous lancer l'interface graphique? (oui/non): ").lower().strip()
    if response in ['oui', 'yes', 'o', 'y']:
        return run_command("python audit_gui.py", "Lancement de l'interface graphique")
    else:
        print("‚è≠Ô∏è Interface graphique ignor√©e.")
        return True

def demo_audit_ligne_commande():
    """D√©monstration de l'audit en ligne de commande."""
    print_header("Audit en Ligne de Commande")
    
    # Utiliser le projet actuel comme exemple
    current_project = Path.cwd().parent  # Remonter d'un niveau depuis audit/
    
    print(f"üìÅ Projet de d√©monstration: {current_project}")
    
    print_step(1, "Initialisation de l'audit dans le projet")
    success = run_command(
        f"python init_audit.py \"{current_project}\"",
        "Initialisation de l'audit dans le projet de d√©monstration"
    )
    
    if success:
        print_step(2, "Ex√©cution de l'audit")
        success = run_command(
            f"python universal_auditor.py \"{current_project}\"",
            "Ex√©cution de l'audit complet"
        )
        
        if success:
            print_step(3, "V√©rification des rapports")
            audit_dir = current_project / ".audit"
            if audit_dir.exists():
                reports_dir = audit_dir / "reports"
                if reports_dir.exists():
                    html_reports = list(reports_dir.glob("*.html"))
                    json_reports = list(reports_dir.glob("*.json"))
                    
                    print(f"‚úÖ Rapports g√©n√©r√©s:")
                    print(f"   ‚Ä¢ HTML: {len(html_reports)} fichier(s)")
                    print(f"   ‚Ä¢ JSON: {len(json_reports)} fichier(s)")
                    
                    if html_reports:
                        latest_html = reports_dir / "latest_report.html"
                        if latest_html.exists():
                            print(f"   ‚Ä¢ Dernier rapport: {latest_html}")
                            
                            response = input("\nVoulez-vous ouvrir le rapport HTML? (oui/non): ").lower().strip()
                            if response in ['oui', 'yes', 'o', 'y']:
                                run_command(f"start {latest_html}", "Ouverture du rapport HTML")
                else:
                    print("‚ùå Aucun rapport trouv√©")
            else:
                print("‚ùå Dossier d'audit non trouv√©")

def demo_migration():
    """D√©monstration de la migration."""
    print_header("Migration des Anciens Rapports")
    
    print("üîÑ Fonctionnalit√©s de migration:")
    print("‚Ä¢ Migration automatique des anciens rapports")
    print("‚Ä¢ Pr√©servation de l'historique")
    print("‚Ä¢ Organisation dans le nouveau syst√®me")
    print("‚Ä¢ Rapport de migration d√©taill√©")
    
    current_project = Path.cwd().parent
    
    print(f"\nüìÅ Migration vers: {current_project}")
    
    success = run_command(
        f"python migrate_old_reports.py \"{current_project}\"",
        "Migration des anciens rapports"
    )
    
    if success:
        print("‚úÖ Migration termin√©e avec succ√®s!")
        print("üìä V√©rifiez le dossier .audit/ pour voir les fichiers migr√©s.")

def demo_types_projets():
    """D√©monstration des types de projets support√©s."""
    print_header("Types de Projets Support√©s")
    
    projects_dir = Path("projects")
    if projects_dir.exists():
        project_types = [d.name for d in projects_dir.iterdir() if d.is_dir()]
        
        print("üéØ Types de projets configur√©s:")
        for project_type in project_types:
            config_file = projects_dir / project_type / "config.json"
            if config_file.exists():
                print(f"   ‚Ä¢ {project_type} ‚úÖ")
            else:
                print(f"   ‚Ä¢ {project_type} ‚ö†Ô∏è (config manquante)")
        
        print(f"\nüìä Total: {len(project_types)} type(s) de projet")
        
        if project_types:
            print("\nüîß Pour ajouter un nouveau type:")
            print("1. Cr√©er le dossier: projects/nouveau_type/")
            print("2. Ajouter config.json")
            print("3. Cr√©er les tests dans tests/")
            print("4. Documenter dans le README")
    else:
        print("‚ùå Dossier projects/ non trouv√©")

def demo_fonctionnalites_avancees():
    """D√©monstration des fonctionnalit√©s avanc√©es."""
    print_header("Fonctionnalit√©s Avanc√©es")
    
    print("üöÄ Fonctionnalit√©s avanc√©es disponibles:")
    print("‚Ä¢ Tests personnalisables par type de projet")
    print("‚Ä¢ Configuration flexible via JSON")
    print("‚Ä¢ Rapports HTML avec graphiques")
    print("‚Ä¢ Logs d√©taill√©s avec horodatage")
    print("‚Ä¢ Migration automatique des anciens syst√®mes")
    print("‚Ä¢ Interface graphique intuitive")
    print("‚Ä¢ Support multi-projets")
    print("‚Ä¢ Architecture modulaire et extensible")
    
    print("\nüìà Avantages du syst√®me:")
    print("‚Ä¢ Gain de temps significatif")
    print("‚Ä¢ Standardisation des audits")
    print("‚Ä¢ Historique complet pr√©serv√©")
    print("‚Ä¢ Facilit√© d'utilisation")
    print("‚Ä¢ Extensibilit√© maximale")

def main():
    """Fonction principale de d√©monstration."""
    print_header("D√©monstration - Syst√®me d'Audit Universel")
    
    print("üéØ Cette d√©monstration pr√©sente les principales fonctionnalit√©s")
    print("   du Syst√®me d'Audit Universel.")
    
    print("\nüìã Menu de d√©monstration:")
    print("1. Interface graphique")
    print("2. Audit en ligne de commande")
    print("3. Migration des anciens rapports")
    print("4. Types de projets support√©s")
    print("5. Fonctionnalit√©s avanc√©es")
    print("6. D√©monstration compl√®te")
    print("0. Quitter")
    
    while True:
        choice = input("\nChoisissez une option (0-6): ").strip()
        
        if choice == "0":
            print("\nüëã Merci d'avoir test√© le Syst√®me d'Audit Universel!")
            break
        elif choice == "1":
            demo_interface_graphique()
        elif choice == "2":
            demo_audit_ligne_commande()
        elif choice == "3":
            demo_migration()
        elif choice == "4":
            demo_types_projets()
        elif choice == "5":
            demo_fonctionnalites_avancees()
        elif choice == "6":
            print_header("D√©monstration Compl√®te")
            demo_interface_graphique()
            time.sleep(1)
            demo_audit_ligne_commande()
            time.sleep(1)
            demo_migration()
            time.sleep(1)
            demo_types_projets()
            time.sleep(1)
            demo_fonctionnalites_avancees()
            print("\nüéâ D√©monstration compl√®te termin√©e!")
        else:
            print("‚ùå Option invalide. Veuillez choisir 0-6.")
    
    print_header("Fin de la D√©monstration")
    print("üí° Pour plus d'informations, consultez:")
    print("   ‚Ä¢ README.md - Documentation principale")
    print("   ‚Ä¢ README_PROJET.md - Documentation du projet")
    print("   ‚Ä¢ audit/README.md - Documentation technique")

if __name__ == "__main__":
    main()
